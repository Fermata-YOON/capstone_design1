
rc_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000074  0800653c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800653c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ec  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234a  00000000  00000000  0002da89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019085  00000000  00000000  00031aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8f4  00000000  00000000  0004ab25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f68  00000000  00000000  0005a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  000eb3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080063e4 	.word	0x080063e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080063e4 	.word	0x080063e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	2201      	movs	r2, #1
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <__io_putchar+0x20>)
 800093e:	f004 f8a0 	bl	8004a82 <HAL_UART_Transmit>

  return ch;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090

08000950 <HAL_UART_RxCpltCallback>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_UART_RxCpltCallback+0xc4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d153      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0xba>
		if(rx3_data == 48) {
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b30      	cmp	r3, #48	; 0x30
 8000968:	d109      	bne.n	800097e <HAL_UART_RxCpltCallback+0x2e>
			right_speed = 0;
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			left_speed = 0;
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			stop_distance = 8;
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_UART_RxCpltCallback+0xd4>)
 8000978:	2208      	movs	r2, #8
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e040      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
		} else {
			if(rx3_data == 49) {
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b31      	cmp	r3, #49	; 0x31
 8000984:	d106      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x44>
				left_speed = 88;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 8000988:	2258      	movs	r2, #88	; 0x58
 800098a:	701a      	strb	r2, [r3, #0]
				right_speed = 88;
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 800098e:	2258      	movs	r2, #88	; 0x58
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e035      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
			} else if(rx3_data == 50) {
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b32      	cmp	r3, #50	; 0x32
 800099a:	d106      	bne.n	80009aa <HAL_UART_RxCpltCallback+0x5a>
				left_speed = 100;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 800099e:	2264      	movs	r2, #100	; 0x64
 80009a0:	701a      	strb	r2, [r3, #0]
				right_speed = 100;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 80009a4:	2264      	movs	r2, #100	; 0x64
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e02a      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
			} else if(rx3_data == 51) {
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b33      	cmp	r3, #51	; 0x33
 80009b0:	d106      	bne.n	80009c0 <HAL_UART_RxCpltCallback+0x70>
				right_speed = 88;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 80009b4:	2258      	movs	r2, #88	; 0x58
 80009b6:	701a      	strb	r2, [r3, #0]
				left_speed = 0;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e01f      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
			} else if(rx3_data == 52) {
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b34      	cmp	r3, #52	; 0x34
 80009c6:	d106      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0x86>
				right_speed = 100;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 80009ca:	2264      	movs	r2, #100	; 0x64
 80009cc:	701a      	strb	r2, [r3, #0]
				left_speed = 88;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 80009d0:	2258      	movs	r2, #88	; 0x58
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e014      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
			} else if(rx3_data == 53) {
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b35      	cmp	r3, #53	; 0x35
 80009dc:	d106      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x9c>
				left_speed = 88;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 80009e0:	2258      	movs	r2, #88	; 0x58
 80009e2:	701a      	strb	r2, [r3, #0]
				right_speed = 0;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e009      	b.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
			} else if(rx3_data == 54) {
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b36      	cmp	r3, #54	; 0x36
 80009f2:	d105      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0xb0>
				left_speed = 100;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_UART_RxCpltCallback+0xd0>)
 80009f6:	2264      	movs	r2, #100	; 0x64
 80009f8:	701a      	strb	r2, [r3, #0]
				right_speed = 88;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_UART_RxCpltCallback+0xcc>)
 80009fc:	2258      	movs	r2, #88	; 0x58
 80009fe:	701a      	strb	r2, [r3, #0]
			}
		}
		//HAL_UART_Transmit(&huart2, data, sizeof(data), 10);
		HAL_UART_Receive_IT(&huart3, &rx3_data, sizeof(&rx3_data));
 8000a00:	2204      	movs	r2, #4
 8000a02:	4905      	ldr	r1, [pc, #20]	; (8000a18 <HAL_UART_RxCpltCallback+0xc8>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <HAL_UART_RxCpltCallback+0xd8>)
 8000a06:	f004 f8ce 	bl	8004ba6 <HAL_UART_Receive_IT>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004800 	.word	0x40004800
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000220 	.word	0x20000220
 8000a20:	20000221 	.word	0x20000221
 8000a24:	20000222 	.word	0x20000222
 8000a28:	200000d4 	.word	0x200000d4

08000a2c <Motor_Right_Speed>:

void Motor_Right_Speed(uint8_t speed)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if(speed == 0) {
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <Motor_Right_Speed+0x1a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <Motor_Right_Speed+0x34>)
 8000a40:	f002 fe10 	bl	8003664 <HAL_TIM_PWM_Stop>
	} else {
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
	}
}
 8000a44:	e007      	b.n	8000a56 <Motor_Right_Speed+0x2a>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <Motor_Right_Speed+0x34>)
 8000a4a:	f002 fd69 	bl	8003520 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <Motor_Right_Speed+0x34>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000148 	.word	0x20000148

08000a64 <Motor_Left_Speed>:

void Motor_Left_Speed(uint8_t speed)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	if(speed == 0) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <Motor_Left_Speed+0x1a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000a74:	2104      	movs	r1, #4
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <Motor_Left_Speed+0x34>)
 8000a78:	f002 fdf4 	bl	8003664 <HAL_TIM_PWM_Stop>
	} else {
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
	}
}
 8000a7c:	e007      	b.n	8000a8e <Motor_Left_Speed+0x2a>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <Motor_Left_Speed+0x34>)
 8000a82:	f002 fd4d 	bl	8003520 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <Motor_Left_Speed+0x34>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000148 	.word	0x20000148

08000a9c <Motor_Forward>:

void Motor_Forward()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_B_PORT, MOTOR_B_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <Motor_Forward+0x30>)
 8000aa6:	f001 ff3b 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_PORT, MOTOR_A_PIN, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <Motor_Forward+0x30>)
 8000ab0:	f001 ff36 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_D_PORT, MOTOR_D_PIN, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <Motor_Forward+0x30>)
 8000aba:	f001 ff31 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_C_PORT, MOTOR_C_PIN, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4802      	ldr	r0, [pc, #8]	; (8000acc <Motor_Forward+0x30>)
 8000ac4:	f001 ff2c 	bl	8002920 <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40011000 	.word	0x40011000

08000ad0 <delay>:
	HAL_GPIO_WritePin(MOTOR_D_PORT, MOTOR_D_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_C_PORT, MOTOR_C_PIN, GPIO_PIN_SET);
}

void delay (uint16_t time)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <delay+0x2c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000ae2:	bf00      	nop
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <delay+0x2c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3f9      	bcc.n	8000ae4 <delay+0x14>
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000190 	.word	0x20000190

08000b00 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7f1b      	ldrb	r3, [r3, #28]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f040 8083 	bne.w	8000c18 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured_1 == 0)
 8000b12:	4b99      	ldr	r3, [pc, #612]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d11a      	bne.n	8000b50 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f003 fad9 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a95      	ldr	r2, [pc, #596]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b26:	6013      	str	r3, [r2, #0]
			Is_First_Captured_1 = 1;
 8000b28:	4b93      	ldr	r3, [pc, #588]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6a1a      	ldr	r2, [r3, #32]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 020a 	bic.w	r2, r2, #10
 8000b3c:	621a      	str	r2, [r3, #32]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a1a      	ldr	r2, [r3, #32]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f042 0202 	orr.w	r2, r2, #2
 8000b4c:	621a      	str	r2, [r3, #32]
 8000b4e:	e063      	b.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured_1 == 1)
 8000b50:	4b89      	ldr	r3, [pc, #548]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d15f      	bne.n	8000c18 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f003 faba 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a87      	ldr	r2, [pc, #540]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b64:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

			if(IC_Val2_1 > IC_Val1_1)
 8000b6e:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b82      	ldr	r3, [pc, #520]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d907      	bls.n	8000b8a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_1 = IC_Val2_1-IC_Val1_1;
 8000b7a:	4b81      	ldr	r3, [pc, #516]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b7f      	ldr	r3, [pc, #508]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	4a7f      	ldr	r2, [pc, #508]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e00f      	b.n	8000baa <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if(IC_Val1_1 > IC_Val2_1)
 8000b8a:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b7c      	ldr	r3, [pc, #496]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d909      	bls.n	8000baa <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_1 = (0xffff - IC_Val1_1) + IC_Val2_1;
 8000b96:	4b7a      	ldr	r3, [pc, #488]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ba4:	33ff      	adds	r3, #255	; 0xff
 8000ba6:	4a77      	ldr	r2, [pc, #476]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000ba8:	6013      	str	r3, [r2, #0]
			}

			Distance_1 = Difference_1 * .034/2;
 8000baa:	4b76      	ldr	r3, [pc, #472]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc10 	bl	80003d4 <__aeabi_ui2d>
 8000bb4:	a36e      	add	r3, pc, #440	; (adr r3, 8000d70 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fc85 	bl	80004c8 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bce:	f7ff fda5 	bl	800071c <__aeabi_ddiv>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f7ff fe87 	bl	80008ec <__aeabi_d2uiz>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000be4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_1 = 0;
 8000be6:	4b64      	ldr	r3, [pc, #400]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6a1a      	ldr	r2, [r3, #32]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 020a 	bic.w	r2, r2, #10
 8000bfa:	621a      	str	r2, [r3, #32]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a12      	ldr	r2, [r2, #32]
 8000c06:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000c08:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0202 	bic.w	r2, r2, #2
 8000c16:	60da      	str	r2, [r3, #12]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f1b      	ldrb	r3, [r3, #28]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	f040 8083 	bne.w	8000d28 <HAL_TIM_IC_CaptureCallback+0x228>
			{
				if (Is_First_Captured_2 == 0)
 8000c22:	4b5b      	ldr	r3, [pc, #364]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11a      	bne.n	8000c60 <HAL_TIM_IC_CaptureCallback+0x160>
				{
					IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f003 fa51 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c36:	6013      	str	r3, [r2, #0]
					Is_First_Captured_2 = 1;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a1a      	ldr	r2, [r3, #32]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000c4c:	621a      	str	r2, [r3, #32]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a1a      	ldr	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f042 0220 	orr.w	r2, r2, #32
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	e063      	b.n	8000d28 <HAL_TIM_IC_CaptureCallback+0x228>
				}

				else if (Is_First_Captured_2 == 1)
 8000c60:	4b4b      	ldr	r3, [pc, #300]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d15f      	bne.n	8000d28 <HAL_TIM_IC_CaptureCallback+0x228>
				{
					IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f003 fa32 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a49      	ldr	r2, [pc, #292]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c74:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24

					if(IC_Val2_2 > IC_Val1_2)
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d907      	bls.n	8000c9a <HAL_TIM_IC_CaptureCallback+0x19a>
					{
						Difference_2 = IC_Val2_2-IC_Val1_2;
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	4a41      	ldr	r2, [pc, #260]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e00f      	b.n	8000cba <HAL_TIM_IC_CaptureCallback+0x1ba>
					}

					else if(IC_Val1_2 > IC_Val2_2)
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d909      	bls.n	8000cba <HAL_TIM_IC_CaptureCallback+0x1ba>
					{
						Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000cb4:	33ff      	adds	r3, #255	; 0xff
 8000cb6:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000cb8:	6013      	str	r3, [r2, #0]
					}

					Distance_2 = Difference_2 * .034/2;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb88 	bl	80003d4 <__aeabi_ui2d>
 8000cc4:	a32a      	add	r3, pc, #168	; (adr r3, 8000d70 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fbfd 	bl	80004c8 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cde:	f7ff fd1d 	bl	800071c <__aeabi_ddiv>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff fdff 	bl	80008ec <__aeabi_d2uiz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000cf4:	701a      	strb	r2, [r3, #0]
					Is_First_Captured_2 = 0;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000d0a:	621a      	str	r2, [r3, #32]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a12      	ldr	r2, [r2, #32]
 8000d16:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0204 	bic.w	r2, r2, #4
 8000d26:	60da      	str	r2, [r3, #12]
				}
			}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7f1b      	ldrb	r3, [r3, #28]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	f040 80a1 	bne.w	8000e74 <HAL_TIM_IC_CaptureCallback+0x374>
		{
			if (Is_First_Captured_3 == 0)
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d138      	bne.n	8000dac <HAL_TIM_IC_CaptureCallback+0x2ac>
			{
				IC_Val1_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f003 f9c9 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d46:	6013      	str	r3, [r2, #0]
				Is_First_Captured_3 = 1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d5c:	621a      	str	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a1a      	ldr	r2, [r3, #32]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d6c:	621a      	str	r2, [r3, #32]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
			}
		}
}
 8000d6e:	e081      	b.n	8000e74 <HAL_TIM_IC_CaptureCallback+0x374>
 8000d70:	b020c49c 	.word	0xb020c49c
 8000d74:	3fa16872 	.word	0x3fa16872
 8000d78:	20000230 	.word	0x20000230
 8000d7c:	20000224 	.word	0x20000224
 8000d80:	20000228 	.word	0x20000228
 8000d84:	2000022c 	.word	0x2000022c
 8000d88:	20000231 	.word	0x20000231
 8000d8c:	20000190 	.word	0x20000190
 8000d90:	20000240 	.word	0x20000240
 8000d94:	20000234 	.word	0x20000234
 8000d98:	20000238 	.word	0x20000238
 8000d9c:	2000023c 	.word	0x2000023c
 8000da0:	20000241 	.word	0x20000241
 8000da4:	20000250 	.word	0x20000250
 8000da8:	20000244 	.word	0x20000244
			else if (Is_First_Captured_3 == 1)
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_TIM_IC_CaptureCallback+0x388>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d15f      	bne.n	8000e74 <HAL_TIM_IC_CaptureCallback+0x374>
				IC_Val2_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000db4:	2108      	movs	r1, #8
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f003 f98c 	bl	80040d4 <HAL_TIM_ReadCapturedValue>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000dc0:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
				if(IC_Val2_3 > IC_Val1_3)
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <HAL_TIM_IC_CaptureCallback+0x2e6>
					Difference_3 = IC_Val2_3-IC_Val1_3;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4a2c      	ldr	r2, [pc, #176]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e00f      	b.n	8000e06 <HAL_TIM_IC_CaptureCallback+0x306>
				else if(IC_Val1_3 > IC_Val2_3)
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d909      	bls.n	8000e06 <HAL_TIM_IC_CaptureCallback+0x306>
					Difference_3 = (0xffff - IC_Val1_3) + IC_Val2_3;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e00:	33ff      	adds	r3, #255	; 0xff
 8000e02:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000e04:	6013      	str	r3, [r2, #0]
				Distance_3 = Difference_3 * .034/2;
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fae2 	bl	80003d4 <__aeabi_ui2d>
 8000e10:	a31b      	add	r3, pc, #108	; (adr r3, 8000e80 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fb57 	bl	80004c8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2a:	f7ff fc77 	bl	800071c <__aeabi_ddiv>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fd59 	bl	80008ec <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_TIM_IC_CaptureCallback+0x398>)
 8000e40:	701a      	strb	r2, [r3, #0]
				Is_First_Captured_3 = 0;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_TIM_IC_CaptureCallback+0x388>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a12      	ldr	r2, [r2, #32]
 8000e62:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0208 	bic.w	r2, r2, #8
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	f3af 8000 	nop.w
 8000e80:	b020c49c 	.word	0xb020c49c
 8000e84:	3fa16872 	.word	0x3fa16872
 8000e88:	20000250 	.word	0x20000250
 8000e8c:	20000248 	.word	0x20000248
 8000e90:	20000244 	.word	0x20000244
 8000e94:	2000024c 	.word	0x2000024c
 8000e98:	20000251 	.word	0x20000251
 8000e9c:	20000190 	.word	0x20000190

08000ea0 <HCSR04_Read>:

void HCSR04_Read(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eaa:	481f      	ldr	r0, [pc, #124]	; (8000f28 <HCSR04_Read+0x88>)
 8000eac:	f001 fd38 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <HCSR04_Read+0x88>)
 8000eb8:	f001 fd32 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <HCSR04_Read+0x88>)
 8000ec4:	f001 fd2c 	bl	8002920 <HAL_GPIO_WritePin>
	delay(10);
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f7ff fe01 	bl	8000ad0 <delay>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4814      	ldr	r0, [pc, #80]	; (8000f28 <HCSR04_Read+0x88>)
 8000ed6:	f001 fd23 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee0:	4811      	ldr	r0, [pc, #68]	; (8000f28 <HCSR04_Read+0x88>)
 8000ee2:	f001 fd1d 	bl	8002920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	480e      	ldr	r0, [pc, #56]	; (8000f28 <HCSR04_Read+0x88>)
 8000eee:	f001 fd17 	bl	8002920 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HCSR04_Read+0x8c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HCSR04_Read+0x8c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0202 	orr.w	r2, r2, #2
 8000f00:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HCSR04_Read+0x8c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HCSR04_Read+0x8c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0204 	orr.w	r2, r2, #4
 8000f10:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3);
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HCSR04_Read+0x8c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HCSR04_Read+0x8c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0208 	orr.w	r2, r2, #8
 8000f20:	60da      	str	r2, [r3, #12]
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20000190 	.word	0x20000190

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fe3c 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f864 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 faac 	bl	8001498 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 fa56 	bl	80013f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f44:	f000 f8b6 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f48:	f000 f8f2 	bl	8001130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f4c:	f000 f970 	bl	8001230 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f50:	f000 f9f4 	bl	800133c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000f54:	f000 fa76 	bl	8001444 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4820      	ldr	r0, [pc, #128]	; (8000fdc <main+0xac>)
 8000f5c:	f002 fc3e 	bl	80037dc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f60:	2104      	movs	r1, #4
 8000f62:	481e      	ldr	r0, [pc, #120]	; (8000fdc <main+0xac>)
 8000f64:	f002 fc3a 	bl	80037dc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000f68:	2108      	movs	r1, #8
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <main+0xac>)
 8000f6c:	f002 fc36 	bl	80037dc <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart3, &rx3_data, sizeof(&rx3_data));
 8000f70:	2204      	movs	r2, #4
 8000f72:	491b      	ldr	r1, [pc, #108]	; (8000fe0 <main+0xb0>)
 8000f74:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <main+0xb4>)
 8000f76:	f003 fe16 	bl	8004ba6 <HAL_UART_Receive_IT>
	  //printf("1 is %dcm \n", Distance_1);
	  //printf("2 is %dcm \n", Distance_2);
	  //printf("3 is %dcm \n", Distance_3);
	  //speed = (ADC_data/400)*10;
	  //printf("%d | %d\n", left_speed, right_speed);
	  printf("%d\n", rx3_data);
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <main+0xb0>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <main+0xb8>)
 8000f82:	f004 fa9b 	bl	80054bc <iprintf>
	  HCSR04_Read();
 8000f86:	f7ff ff8b 	bl	8000ea0 <HCSR04_Read>
	  if(Distance_1 < stop_distance || Distance_2 < stop_distance || Distance_3 < stop_distance) {
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <main+0xbc>)
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <main+0xc0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d30b      	bcc.n	8000fae <main+0x7e>
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <main+0xc4>)
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <main+0xc0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d305      	bcc.n	8000fae <main+0x7e>
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <main+0xc8>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <main+0xc0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d206      	bcs.n	8000fbc <main+0x8c>
		  Motor_Right_Speed(0);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff fd3c 	bl	8000a2c <Motor_Right_Speed>
		  Motor_Left_Speed(0);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fd55 	bl	8000a64 <Motor_Left_Speed>
 8000fba:	e00b      	b.n	8000fd4 <main+0xa4>
	  } else {
		  Motor_Right_Speed(right_speed);
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <main+0xcc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd33 	bl	8000a2c <Motor_Right_Speed>
		  Motor_Left_Speed(left_speed);
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <main+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd4a 	bl	8000a64 <Motor_Left_Speed>
		  Motor_Forward();
 8000fd0:	f7ff fd64 	bl	8000a9c <Motor_Forward>
	  }
	  HAL_Delay(20);
 8000fd4:	2014      	movs	r0, #20
 8000fd6:	f000 fe4d 	bl	8001c74 <HAL_Delay>
  {
 8000fda:	e7ce      	b.n	8000f7a <main+0x4a>
 8000fdc:	20000190 	.word	0x20000190
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200000d4 	.word	0x200000d4
 8000fe8:	080063fc 	.word	0x080063fc
 8000fec:	20000231 	.word	0x20000231
 8000ff0:	20000222 	.word	0x20000222
 8000ff4:	20000241 	.word	0x20000241
 8000ff8:	20000251 	.word	0x20000251
 8000ffc:	20000220 	.word	0x20000220
 8001000:	20000221 	.word	0x20000221

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fa4a 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001044:	2300      	movs	r3, #0
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001048:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc9e 	bl	8002994 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800105e:	f000 fa9f 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ff0a 	bl	8002e98 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800108a:	f000 fa89 	bl	80015a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800108e:	2302      	movs	r3, #2
 8001090:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001096:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f894 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010a6:	f000 fa7b 	bl	80015a0 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_ADC1_Init+0x74>)
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <MX_ADC1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_ADC1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_ADC1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_ADC1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_ADC1_Init+0x74>)
 80010de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_ADC1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_ADC1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_ADC1_Init+0x74>)
 80010f2:	f000 fde3 	bl	8001cbc <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 fa50 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001100:	2306      	movs	r3, #6
 8001102:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_ADC1_Init+0x74>)
 8001112:	f000 ff81 	bl	8002018 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800111c:	f000 fa40 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000118 	.word	0x20000118
 800112c:	40012400 	.word	0x40012400

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_TIM2_Init+0xfc>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_TIM2_Init+0xfc>)
 800116a:	223f      	movs	r2, #63	; 0x3f
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_TIM2_Init+0xfc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_TIM2_Init+0xfc>)
 8001176:	2263      	movs	r2, #99	; 0x63
 8001178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <MX_TIM2_Init+0xfc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_TIM2_Init+0xfc>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001186:	4829      	ldr	r0, [pc, #164]	; (800122c <MX_TIM2_Init+0xfc>)
 8001188:	f002 f8d4 	bl	8003334 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001192:	f000 fa05 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	; (800122c <MX_TIM2_Init+0xfc>)
 80011a4:	f002 fed2 	bl	8003f4c <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011ae:	f000 f9f7 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b2:	481e      	ldr	r0, [pc, #120]	; (800122c <MX_TIM2_Init+0xfc>)
 80011b4:	f002 f95c 	bl	8003470 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011be:	f000 f9ef 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	4619      	mov	r1, r3
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_TIM2_Init+0xfc>)
 80011d2:	f003 fb99 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80011dc:	f000 f9e0 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_TIM2_Init+0xfc>)
 80011f8:	f002 fdea 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001202:	f000 f9cd 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM2_Init+0xfc>)
 800120e:	f002 fddf 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001218:	f000 f9c2 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM2_Init+0xfc>)
 800121e:	f000 fac7 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001222:	bf00      	nop
 8001224:	3738      	adds	r7, #56	; 0x38
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000148 	.word	0x20000148

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125a:	4b36      	ldr	r3, [pc, #216]	; (8001334 <MX_TIM3_Init+0x104>)
 800125c:	4a36      	ldr	r2, [pc, #216]	; (8001338 <MX_TIM3_Init+0x108>)
 800125e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <MX_TIM3_Init+0x104>)
 8001262:	223f      	movs	r2, #63	; 0x3f
 8001264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <MX_TIM3_Init+0x104>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_TIM3_Init+0x104>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_TIM3_Init+0x104>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_TIM3_Init+0x104>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001280:	482c      	ldr	r0, [pc, #176]	; (8001334 <MX_TIM3_Init+0x104>)
 8001282:	f002 f857 	bl	8003334 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 f988 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4619      	mov	r1, r3
 800129c:	4825      	ldr	r0, [pc, #148]	; (8001334 <MX_TIM3_Init+0x104>)
 800129e:	f002 fe55 	bl	8003f4c <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f000 f97a 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <MX_TIM3_Init+0x104>)
 80012ae:	f002 fa3d 	bl	800372c <HAL_TIM_IC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b8:	f000 f972 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <MX_TIM3_Init+0x104>)
 80012cc:	f003 fb1c 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012d6:	f000 f963 	bl	80015a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012de:	2301      	movs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80012e6:	230f      	movs	r3, #15
 80012e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM3_Init+0x104>)
 80012f2:	f002 fcd9 	bl	8003ca8 <HAL_TIM_IC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80012fc:	f000 f950 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <MX_TIM3_Init+0x104>)
 8001308:	f002 fcce 	bl	8003ca8 <HAL_TIM_IC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001312:	f000 f945 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	2208      	movs	r2, #8
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM3_Init+0x104>)
 800131e:	f002 fcc3 	bl	8003ca8 <HAL_TIM_IC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001328:	f000 f93a 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000190 	.word	0x20000190
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_TIM4_Init+0xac>)
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <MX_TIM4_Init+0xb0>)
 8001362:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_TIM4_Init+0xac>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_TIM4_Init+0xac>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM4_Init+0xac>)
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_TIM4_Init+0xac>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM4_Init+0xac>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_TIM4_Init+0xac>)
 8001386:	f002 f824 	bl	80033d2 <HAL_TIM_OC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f906 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_TIM4_Init+0xac>)
 80013a4:	f003 fab0 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013ae:	f000 f8f7 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM4_Init+0xac>)
 80013ca:	f002 fc15 	bl	8003bf8 <HAL_TIM_OC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013d4:	f000 f8e4 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM4_Init+0xac>)
 80013da:	f000 f9e9 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001d8 	.word	0x200001d8
 80013ec:	40000800 	.word	0x40000800

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f003 fade 	bl	80049e8 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f8b5 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000090 	.word	0x20000090
 8001440:	40004400 	.word	0x40004400

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_USART3_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 8001450:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART3_UART_Init+0x4c>)
 800147c:	f003 fab4 	bl	80049e8 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f000 f88b 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000d4 	.word	0x200000d4
 8001494:	40004800 	.word	0x40004800

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a37      	ldr	r2, [pc, #220]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a2b      	ldr	r2, [pc, #172]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_GPIO_Init+0xf8>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <MX_GPIO_Init+0xf8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	210f      	movs	r1, #15
 8001510:	4820      	ldr	r0, [pc, #128]	; (8001594 <MX_GPIO_Init+0xfc>)
 8001512:	f001 fa05 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800151c:	481e      	ldr	r0, [pc, #120]	; (8001598 <MX_GPIO_Init+0x100>)
 800151e:	f001 f9ff 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_GPIO_Init+0x104>)
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <MX_GPIO_Init+0xfc>)
 8001538:	f001 f86e 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800153c:	230f      	movs	r3, #15
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4810      	ldr	r0, [pc, #64]	; (8001594 <MX_GPIO_Init+0xfc>)
 8001554:	f001 f860 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001558:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2302      	movs	r3, #2
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4619      	mov	r1, r3
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <MX_GPIO_Init+0x100>)
 8001572:	f001 f851 	bl	8002618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2028      	movs	r0, #40	; 0x28
 800157c:	f000 ff65 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001580:	2028      	movs	r0, #40	; 0x28
 8001582:	f000 ff7e 	bl	8002482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40011000 	.word	0x40011000
 8001598:	40010800 	.word	0x40010800
 800159c:	10110000 	.word	0x10110000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_ADC_MspInit+0x7c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d129      	bne.n	8001684 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_ADC_MspInit+0x80>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_ADC_MspInit+0x80>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_ADC_MspInit+0x80>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_ADC_MspInit+0x84>)
 8001670:	f000 ffd2 	bl	8002618 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2012      	movs	r0, #18
 800167a:	f000 fee6 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800167e:	2012      	movs	r0, #18
 8001680:	f000 feff 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40012400 	.word	0x40012400
 8001690:	40021000 	.word	0x40021000
 8001694:	40010800 	.word	0x40010800

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b6:	d10c      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a29      	ldr	r2, [pc, #164]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d0:	e043      	b.n	800175a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_TIM_Base_MspInit+0xd0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d13e      	bne.n	800175a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_TIM_Base_MspInit+0xcc>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800170c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <HAL_TIM_Base_MspInit+0xd4>)
 8001722:	f000 ff79 	bl	8002618 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_TIM_Base_MspInit+0xd8>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_TIM_Base_MspInit+0xd8>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	201d      	movs	r0, #29
 8001750:	f000 fe7b 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001754:	201d      	movs	r0, #29
 8001756:	f000 fe94 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40000400 	.word	0x40000400
 800176c:	40011000 	.word	0x40011000
 8001770:	40010000 	.word	0x40010000

08001774 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_TIM_OC_MspInit+0x34>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10b      	bne.n	800179e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_OC_MspInit+0x38>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_TIM_OC_MspInit+0x38>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_OC_MspInit+0x38>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40000800 	.word	0x40000800
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ce:	d118      	bne.n	8001802 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e8:	2303      	movs	r3, #3
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <HAL_TIM_MspPostInit+0x98>)
 80017fc:	f000 ff0c 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001800:	e01c      	b.n	800183c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_TIM_MspPostInit+0x9c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d117      	bne.n	800183c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_TIM_MspPostInit+0x94>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <HAL_TIM_MspPostInit+0xa0>)
 8001838:	f000 feee 	bl	8002618 <HAL_GPIO_Init>
}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	40010800 	.word	0x40010800
 800184c:	40000800 	.word	0x40000800
 8001850:	40010c00 	.word	0x40010c00

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a39      	ldr	r2, [pc, #228]	; (8001954 <HAL_UART_MspInit+0x100>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d12c      	bne.n	80018ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001874:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_UART_MspInit+0x104>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a37      	ldr	r2, [pc, #220]	; (8001958 <HAL_UART_MspInit+0x104>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	61d3      	str	r3, [r2, #28]
 8001880:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_UART_MspInit+0x104>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_UART_MspInit+0x104>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_UART_MspInit+0x104>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_UART_MspInit+0x104>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018a4:	230c      	movs	r3, #12
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2302      	movs	r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4829      	ldr	r0, [pc, #164]	; (800195c <HAL_UART_MspInit+0x108>)
 80018b8:	f000 feae 	bl	8002618 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2026      	movs	r0, #38	; 0x26
 80018c2:	f000 fdc2 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c6:	2026      	movs	r0, #38	; 0x26
 80018c8:	f000 fddb 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018cc:	e03e      	b.n	800194c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART3)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_UART_MspInit+0x10c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d139      	bne.n	800194c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e2:	61d3      	str	r3, [r2, #28]
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4619      	mov	r1, r3
 800191c:	4811      	ldr	r0, [pc, #68]	; (8001964 <HAL_UART_MspInit+0x110>)
 800191e:	f000 fe7b 	bl	8002618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4619      	mov	r1, r3
 8001936:	480b      	ldr	r0, [pc, #44]	; (8001964 <HAL_UART_MspInit+0x110>)
 8001938:	f000 fe6e 	bl	8002618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2027      	movs	r0, #39	; 0x27
 8001942:	f000 fd82 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001946:	2027      	movs	r0, #39	; 0x27
 8001948:	f000 fd9b 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004400 	.word	0x40004400
 8001958:	40021000 	.word	0x40021000
 800195c:	40010800 	.word	0x40010800
 8001960:	40004800 	.word	0x40004800
 8001964:	40010c00 	.word	0x40010c00

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f945 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <ADC1_2_IRQHandler+0x10>)
 80019be:	f000 fa55 	bl	8001e6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000118 	.word	0x20000118

080019cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM3_IRQHandler+0x10>)
 80019d2:	f002 f809 	bl	80039e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000190 	.word	0x20000190

080019e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <USART2_IRQHandler+0x10>)
 80019e6:	f003 f90f 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000090 	.word	0x20000090

080019f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <USART3_IRQHandler+0x10>)
 80019fa:	f003 f905 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000d4 	.word	0x200000d4

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a10:	f000 ff9e 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00a      	b.n	8001a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2a:	f3af 8000 	nop.w
 8001a2e:	4601      	mov	r1, r0
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <_read+0x12>
  }

  return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e009      	b.n	8001a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe ff5d 	bl	800092c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf1      	blt.n	8001a64 <_write+0x12>
  }
  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_close>:

int _close(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f003 fc9c 	bl	8005458 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20005000 	.word	0x20005000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000254 	.word	0x20000254
 8001b54:	20000270 	.word	0x20000270

08001b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8a:	f7ff ffe5 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f003 fc69 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b92:	f7ff f9cd 	bl	8000f30 <main>
  bx lr
 8001b96:	4770      	bx	lr
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ba0:	080064c8 	.word	0x080064c8
  ldr r2, =_sbss
 8001ba4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ba8:	2000026c 	.word	0x2000026c

08001bac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <CAN1_RX1_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x28>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 fc37 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fcee 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fc4f 	bl	800249e <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c18:	f000 fc17 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000004 	.word	0x20000004
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	20000008 	.word	0x20000008

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	20000258 	.word	0x20000258

08001c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000258 	.word	0x20000258

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffe0 	bl	8001c60 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0be      	b.n	8001e5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fc88 	bl	8001610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fa81 	bl	8002208 <ADC_ConversionStop_Disable>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8099 	bne.w	8001e4a <HAL_ADC_Init+0x18e>
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8095 	bne.w	8001e4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	f043 0202 	orr.w	r2, r3, #2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7b1b      	ldrb	r3, [r3, #12]
 8001d42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d54:	d003      	beq.n	8001d5e <HAL_ADC_Init+0xa2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_ADC_Init+0xa8>
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_Init+0xaa>
 8001d64:	2300      	movs	r3, #0
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7d1b      	ldrb	r3, [r3, #20]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d119      	bne.n	8001da8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	035a      	lsls	r2, r3, #13
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e00b      	b.n	8001da8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_ADC_Init+0x1a8>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d003      	beq.n	8001de2 <HAL_ADC_Init+0x126>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d104      	bne.n	8001dec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_ADC_Init+0x1ac>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10b      	bne.n	8001e28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e26:	e018      	b.n	8001e5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f023 0312 	bic.w	r3, r3, #18
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e48:	e007      	b.n	8001e5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	ffe1f7fd 	.word	0xffe1f7fd
 8001e68:	ff1f0efe 	.word	0xff1f0efe

08001e6c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d140      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d139      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eb6:	d11d      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d119      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0220 	bic.w	r2, r2, #32
 8001ece:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f87c 	bl	8001ff2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0212 	mvn.w	r2, #18
 8001f02:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d14f      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d148      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f42:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f46:	d012      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d125      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f64:	d11d      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f971 	bl	800228a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 020c 	mvn.w	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b40      	cmp	r3, #64	; 0x40
 8001fbe:	d114      	bne.n	8001fea <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10d      	bne.n	8001fea <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f812 	bl	8002004 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0201 	mvn.w	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e0dc      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1da>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d81c      	bhi.n	8002082 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b05      	subs	r3, #5
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b05      	subs	r3, #5
 8002074:	fa00 f203 	lsl.w	r2, r0, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
 8002080:	e03c      	b.n	80020fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d81c      	bhi.n	80020c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b23      	subs	r3, #35	; 0x23
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4019      	ands	r1, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b23      	subs	r3, #35	; 0x23
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	e01b      	b.n	80020fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b41      	subs	r3, #65	; 0x41
 80020d6:	221f      	movs	r2, #31
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	4019      	ands	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	fa00 f203 	lsl.w	r2, r0, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d91c      	bls.n	800213e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1e      	subs	r3, #30
 8002116:	2207      	movs	r2, #7
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6898      	ldr	r0, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e019      	b.n	8002172 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d003      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800217e:	2b11      	cmp	r3, #17
 8002180:	d132      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d125      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d126      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d11a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_ADC_ConfigChannel+0x1e8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_ADC_ConfigChannel+0x1ec>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0c9a      	lsrs	r2, r3, #18
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1b2>
 80021d6:	e007      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	40012400 	.word	0x40012400
 8002200:	20000004 	.word	0x20000004
 8002204:	431bde83 	.word	0x431bde83

08002208 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d12e      	bne.n	8002280 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002232:	f7ff fd15 	bl	8001c60 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002238:	e01b      	b.n	8002272 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800223a:	f7ff fd11 	bl	8001c60 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d914      	bls.n	8002272 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10d      	bne.n	8002272 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e007      	b.n	8002282 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d0dc      	beq.n	800223a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <__NVIC_EnableIRQ+0x34>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff2d 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff42 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff35 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e020      	b.n	8002520 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 020e 	bic.w	r2, r2, #14
 80024ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253e:	2b02      	cmp	r3, #2
 8002540:	d005      	beq.n	800254e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e051      	b.n	80025f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 020e 	bic.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_DMA_Abort_IT+0xd0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d029      	beq.n	80025cc <HAL_DMA_Abort_IT+0xa0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a20      	ldr	r2, [pc, #128]	; (8002600 <HAL_DMA_Abort_IT+0xd4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d022      	beq.n	80025c8 <HAL_DMA_Abort_IT+0x9c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_DMA_Abort_IT+0xd8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d01a      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x96>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_DMA_Abort_IT+0xdc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d012      	beq.n	80025bc <HAL_DMA_Abort_IT+0x90>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_DMA_Abort_IT+0xe0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00a      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x8a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <HAL_DMA_Abort_IT+0xe4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d102      	bne.n	80025b0 <HAL_DMA_Abort_IT+0x84>
 80025aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ae:	e00e      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b4:	e00b      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ba:	e008      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c0:	e005      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c6:	e002      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025c8:	2310      	movs	r3, #16
 80025ca:	e000      	b.n	80025ce <HAL_DMA_Abort_IT+0xa2>
 80025cc:	2301      	movs	r3, #1
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_DMA_Abort_IT+0xe8>)
 80025d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
    } 
  }
  return status;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020008 	.word	0x40020008
 8002600:	4002001c 	.word	0x4002001c
 8002604:	40020030 	.word	0x40020030
 8002608:	40020044 	.word	0x40020044
 800260c:	40020058 	.word	0x40020058
 8002610:	4002006c 	.word	0x4002006c
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b08b      	sub	sp, #44	; 0x2c
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	e169      	b.n	8002900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800262c:	2201      	movs	r2, #1
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8158 	bne.w	80028fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a9a      	ldr	r2, [pc, #616]	; (80028b8 <HAL_GPIO_Init+0x2a0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d05e      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002654:	4a98      	ldr	r2, [pc, #608]	; (80028b8 <HAL_GPIO_Init+0x2a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d875      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800265a:	4a98      	ldr	r2, [pc, #608]	; (80028bc <HAL_GPIO_Init+0x2a4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d058      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002660:	4a96      	ldr	r2, [pc, #600]	; (80028bc <HAL_GPIO_Init+0x2a4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d86f      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002666:	4a96      	ldr	r2, [pc, #600]	; (80028c0 <HAL_GPIO_Init+0x2a8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d052      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 800266c:	4a94      	ldr	r2, [pc, #592]	; (80028c0 <HAL_GPIO_Init+0x2a8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d869      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002672:	4a94      	ldr	r2, [pc, #592]	; (80028c4 <HAL_GPIO_Init+0x2ac>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04c      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002678:	4a92      	ldr	r2, [pc, #584]	; (80028c4 <HAL_GPIO_Init+0x2ac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d863      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800267e:	4a92      	ldr	r2, [pc, #584]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d046      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
 8002684:	4a90      	ldr	r2, [pc, #576]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d85d      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 800268a:	2b12      	cmp	r3, #18
 800268c:	d82a      	bhi.n	80026e4 <HAL_GPIO_Init+0xcc>
 800268e:	2b12      	cmp	r3, #18
 8002690:	d859      	bhi.n	8002746 <HAL_GPIO_Init+0x12e>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_GPIO_Init+0x80>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	08002713 	.word	0x08002713
 800269c:	080026ed 	.word	0x080026ed
 80026a0:	080026ff 	.word	0x080026ff
 80026a4:	08002741 	.word	0x08002741
 80026a8:	08002747 	.word	0x08002747
 80026ac:	08002747 	.word	0x08002747
 80026b0:	08002747 	.word	0x08002747
 80026b4:	08002747 	.word	0x08002747
 80026b8:	08002747 	.word	0x08002747
 80026bc:	08002747 	.word	0x08002747
 80026c0:	08002747 	.word	0x08002747
 80026c4:	08002747 	.word	0x08002747
 80026c8:	08002747 	.word	0x08002747
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002747 	.word	0x08002747
 80026d4:	08002747 	.word	0x08002747
 80026d8:	08002747 	.word	0x08002747
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	08002709 	.word	0x08002709
 80026e4:	4a79      	ldr	r2, [pc, #484]	; (80028cc <HAL_GPIO_Init+0x2b4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ea:	e02c      	b.n	8002746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	623b      	str	r3, [r7, #32]
          break;
 80026f2:	e029      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	3304      	adds	r3, #4
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e024      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e01f      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	330c      	adds	r3, #12
 800270e:	623b      	str	r3, [r7, #32]
          break;
 8002710:	e01a      	b.n	8002748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800271a:	2304      	movs	r3, #4
 800271c:	623b      	str	r3, [r7, #32]
          break;
 800271e:	e013      	b.n	8002748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002728:	2308      	movs	r3, #8
 800272a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	611a      	str	r2, [r3, #16]
          break;
 8002732:	e009      	b.n	8002748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002734:	2308      	movs	r3, #8
 8002736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	615a      	str	r2, [r3, #20]
          break;
 800273e:	e003      	b.n	8002748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x130>
          break;
 8002746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d801      	bhi.n	8002752 <HAL_GPIO_Init+0x13a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	e001      	b.n	8002756 <HAL_GPIO_Init+0x13e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	d802      	bhi.n	8002764 <HAL_GPIO_Init+0x14c>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x152>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3b08      	subs	r3, #8
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	210f      	movs	r1, #15
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	6a39      	ldr	r1, [r7, #32]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80b1 	beq.w	80028fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002798:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <HAL_GPIO_Init+0x2b8>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <HAL_GPIO_Init+0x2b8>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_GPIO_Init+0x2b8>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b0:	4a48      	ldr	r2, [pc, #288]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <HAL_GPIO_Init+0x2c0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <HAL_GPIO_Init+0x1ec>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <HAL_GPIO_Init+0x2c4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00d      	beq.n	8002800 <HAL_GPIO_Init+0x1e8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <HAL_GPIO_Init+0x2c8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d007      	beq.n	80027fc <HAL_GPIO_Init+0x1e4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3d      	ldr	r2, [pc, #244]	; (80028e4 <HAL_GPIO_Init+0x2cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_GPIO_Init+0x1e0>
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e004      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_GPIO_Init+0x1ee>
 8002804:	2300      	movs	r3, #0
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	f002 0203 	and.w	r2, r2, #3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4093      	lsls	r3, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002816:	492f      	ldr	r1, [pc, #188]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	492c      	ldr	r1, [pc, #176]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800283e:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	43db      	mvns	r3, r3
 8002846:	4928      	ldr	r1, [pc, #160]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002848:	4013      	ands	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4922      	ldr	r1, [pc, #136]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	43db      	mvns	r3, r3
 800286e:	491e      	ldr	r1, [pc, #120]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002870:	4013      	ands	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4918      	ldr	r1, [pc, #96]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	4914      	ldr	r1, [pc, #80]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d021      	beq.n	80028ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e021      	b.n	80028fa <HAL_GPIO_Init+0x2e2>
 80028b6:	bf00      	nop
 80028b8:	10320000 	.word	0x10320000
 80028bc:	10310000 	.word	0x10310000
 80028c0:	10220000 	.word	0x10220000
 80028c4:	10210000 	.word	0x10210000
 80028c8:	10120000 	.word	0x10120000
 80028cc:	10110000 	.word	0x10110000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010000 	.word	0x40010000
 80028d8:	40010800 	.word	0x40010800
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	40011000 	.word	0x40011000
 80028e4:	40011400 	.word	0x40011400
 80028e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_GPIO_Init+0x304>)
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	4909      	ldr	r1, [pc, #36]	; (800291c <HAL_GPIO_Init+0x304>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	f47f ae8e 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	372c      	adds	r7, #44	; 0x2c
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f806 	bl	8002980 <HAL_GPIO_EXTI_Callback>
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e272      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24c      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f8f6 	bl	8001c60 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff f8f2 	bl	8001c60 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e200      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f8e2 	bl	8001c60 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f8de 	bl	8001c60 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ec      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f897 	bl	8001c60 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7ff f893 	bl	8001c60 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff f876 	bl	8001c60 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff f872 	bl	8001c60 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e180      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f856 	bl	8001c60 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f852 	bl	8001c60 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e160      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 fad8 	bl	800318c <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7ff f83c 	bl	8001c60 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff f838 	bl	8001c60 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e146      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b82      	ldr	r3, [pc, #520]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fff9 	bl	8001c60 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fff5 	bl	8001c60 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e103      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe ffa9 	bl	8001c60 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe ffa5 	bl	8001c60 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe ff93 	bl	8001c60 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe ff8f 	bl	8001c60 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e09b      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff63 	bl	8001c60 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe ff5f 	bl	8001c60 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e06d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4921      	ldr	r1, [pc, #132]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe ff33 	bl	8001c60 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe ff2f 	bl	8001c60 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe ff1c 	bl	8001c60 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe ff18 	bl	8001c60 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e01e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e019      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x500>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4965      	ldr	r1, [pc, #404]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e073      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4936      	ldr	r1, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fe6a 	bl	8001c60 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fe66 	bl	8001c60 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e053      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4922      	ldr	r1, [pc, #136]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fdc8 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	08006410 	.word	0x08006410
 8003064:	20000004 	.word	0x20000004
 8003068:	20000008 	.word	0x20000008

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b490      	push	{r4, r7}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_GetSysClockFreq+0xac>)
 8003074:	1d3c      	adds	r4, r7, #4
 8003076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800307c:	f240 2301 	movw	r3, #513	; 0x201
 8003080:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x40>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x46>
 80030aa:	e02b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ae:	623b      	str	r3, [r7, #32]
      break;
 80030b0:	e02b      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3328      	adds	r3, #40	; 0x28
 80030bc:	443b      	add	r3, r7
 80030be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0c5b      	lsrs	r3, r3, #17
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	3328      	adds	r3, #40	; 0x28
 80030da:	443b      	add	r3, r7
 80030dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030e6:	fb03 f202 	mul.w	r2, r3, r2
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	623b      	str	r3, [r7, #32]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003106:	623b      	str	r3, [r7, #32]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6a3b      	ldr	r3, [r7, #32]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc90      	pop	{r4, r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	08006400 	.word	0x08006400
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	003d0900 	.word	0x003d0900

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08006420 	.word	0x08006420

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffde 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08006420 	.word	0x08006420

0800318c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCC_Delay+0x34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <RCC_Delay+0x38>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a8:	bf00      	nop
  }
  while (Delay --);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <RCC_Delay+0x1c>
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000004 	.word	0x20000004
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d07d      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e8:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	61d3      	str	r3, [r2, #28]
 8003200:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fe fd1a 	bl	8001c60 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe fd16 	bl	8001c60 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e06d      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d027      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327c:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003282:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fce5 	bl	8001c60 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fce1 	bl	8001c60 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e036      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4917      	ldr	r1, [pc, #92]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	490b      	ldr	r1, [pc, #44]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	42420440 	.word	0x42420440

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe f99c 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 ff16 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e041      	b.n	8003468 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fe f9bb 	bl	8001774 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f000 fec7 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f839 	bl	800350e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 fe78 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x24>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e022      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d109      	bne.n	800355e <HAL_TIM_PWM_Start+0x3e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e015      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x58>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e05e      	b.n	8003650 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	e013      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x92>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	e00b      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	e003      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	6839      	ldr	r1, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f973 	bl	80048be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_TIM_PWM_Start+0x138>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIM_PWM_Start+0x138>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIM_PWM_Start+0xfa>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d009      	beq.n	800361a <HAL_TIM_PWM_Start+0xfa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_TIM_PWM_Start+0x13c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIM_PWM_Start+0xfa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a12      	ldr	r2, [pc, #72]	; (8003660 <HAL_TIM_PWM_Start+0x140>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b06      	cmp	r3, #6
 800362a:	d010      	beq.n	800364e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	e007      	b.n	800364e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800

08003664 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f921 	bl	80048be <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	; (8003728 <HAL_TIM_PWM_Stop+0xc4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d117      	bne.n	80036b6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_TIM_PWM_Stop+0x52>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	f240 4344 	movw	r3, #1092	; 0x444
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_PWM_Stop+0x52>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <HAL_TIM_PWM_Stop+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	f240 4344 	movw	r3, #1092	; 0x444
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_PWM_Stop+0x82>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Stop+0x92>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Stop+0xba>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Stop+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Stop+0xba>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Stop+0xb2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Stop+0xba>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40012c00 	.word	0x40012c00

0800372c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f839 	bl	80037ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fd1a 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0x1a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e013      	b.n	800381e <HAL_TIM_IC_Start_IT+0x42>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_IC_Start_IT+0x2a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e00b      	b.n	800381e <HAL_TIM_IC_Start_IT+0x42>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_TIM_IC_Start_IT+0x3a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e003      	b.n	800381e <HAL_TIM_IC_Start_IT+0x42>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_TIM_IC_Start_IT+0x54>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e013      	b.n	8003858 <HAL_TIM_IC_Start_IT+0x7c>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d104      	bne.n	8003840 <HAL_TIM_IC_Start_IT+0x64>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e00b      	b.n	8003858 <HAL_TIM_IC_Start_IT+0x7c>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d104      	bne.n	8003850 <HAL_TIM_IC_Start_IT+0x74>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e003      	b.n	8003858 <HAL_TIM_IC_Start_IT+0x7c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003856:	b2db      	uxtb	r3, r3
 8003858:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003860:	7bbb      	ldrb	r3, [r7, #14]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0b3      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0x9e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	e013      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0xc6>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Start_IT+0xae>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003888:	e00b      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0xc6>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d104      	bne.n	800389a <HAL_TIM_IC_Start_IT+0xbe>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003898:	e003      	b.n	80038a2 <HAL_TIM_IC_Start_IT+0xc6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_IC_Start_IT+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b0:	e013      	b.n	80038da <HAL_TIM_IC_Start_IT+0xfe>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0xe6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c0:	e00b      	b.n	80038da <HAL_TIM_IC_Start_IT+0xfe>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0xf6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d0:	e003      	b.n	80038da <HAL_TIM_IC_Start_IT+0xfe>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d841      	bhi.n	8003964 <HAL_TIM_IC_Start_IT+0x188>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_TIM_IC_Start_IT+0x10c>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003965 	.word	0x08003965
 80038f0:	08003965 	.word	0x08003965
 80038f4:	08003965 	.word	0x08003965
 80038f8:	0800392f 	.word	0x0800392f
 80038fc:	08003965 	.word	0x08003965
 8003900:	08003965 	.word	0x08003965
 8003904:	08003965 	.word	0x08003965
 8003908:	08003941 	.word	0x08003941
 800390c:	08003965 	.word	0x08003965
 8003910:	08003965 	.word	0x08003965
 8003914:	08003965 	.word	0x08003965
 8003918:	08003953 	.word	0x08003953
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0202 	orr.w	r2, r2, #2
 800392a:	60da      	str	r2, [r3, #12]
      break;
 800392c:	e01b      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0204 	orr.w	r2, r2, #4
 800393c:	60da      	str	r2, [r3, #12]
      break;
 800393e:	e012      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0208 	orr.w	r2, r2, #8
 800394e:	60da      	str	r2, [r3, #12]
      break;
 8003950:	e009      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0210 	orr.w	r2, r2, #16
 8003960:	60da      	str	r2, [r3, #12]
      break;
 8003962:	e000      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003964:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ffa5 	bl	80048be <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_TIM_IC_Start_IT+0x200>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_TIM_IC_Start_IT+0x1c0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d009      	beq.n	800399c <HAL_TIM_IC_Start_IT+0x1c0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_TIM_IC_Start_IT+0x204>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_TIM_IC_Start_IT+0x1c0>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_TIM_IC_Start_IT+0x208>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b06      	cmp	r3, #6
 80039ac:	d010      	beq.n	80039d0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039be:	e007      	b.n	80039d0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800

080039e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0202 	mvn.w	r2, #2
 8003a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd f868 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fb9b 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fba1 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0204 	mvn.w	r2, #4
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd f83e 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fb71 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fb77 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0208 	mvn.w	r2, #8
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd f814 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fb47 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb4d 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0210 	mvn.w	r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2208      	movs	r2, #8
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fc ffea 	bl	8000b00 <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb1d 	bl	800416e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb23 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10e      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0201 	mvn.w	r2, #1
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 faf8 	bl	800415c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d10e      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d107      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 ff1f 	bl	80049d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fae7 	bl	8004192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0220 	mvn.w	r2, #32
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 feea 	bl	80049c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e046      	b.n	8003ca0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d839      	bhi.n	8003c94 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003c95 	.word	0x08003c95
 8003c34:	08003c95 	.word	0x08003c95
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c87 	.word	0x08003c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb00 	bl	8004268 <TIM_OC1_SetConfig>
      break;
 8003c68:	e015      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fb5f 	bl	8004334 <TIM_OC2_SetConfig>
      break;
 8003c76:	e00e      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fbc2 	bl	8004408 <TIM_OC3_SetConfig>
      break;
 8003c84:	e007      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fc25 	bl	80044dc <TIM_OC4_SetConfig>
      break;
 8003c92:	e000      	b.n	8003c96 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e082      	b.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0x120>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11b      	bne.n	8003d08 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f000 fc4a 	bl	8004578 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 020c 	bic.w	r2, r2, #12
 8003cf2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e05a      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d11c      	bne.n	8003d48 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f000 fcb3 	bl	8004688 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6999      	ldr	r1, [r3, #24]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	021a      	lsls	r2, r3, #8
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
 8003d46:	e03a      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d11b      	bne.n	8003d86 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f000 fcfe 	bl	800475e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 020c 	bic.w	r2, r2, #12
 8003d70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
 8003d84:	e01b      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f000 fd1d 	bl	80047d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003da8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69d9      	ldr	r1, [r3, #28]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	021a      	lsls	r2, r3, #8
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0ac      	b.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	f200 809f 	bhi.w	8003f38 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003f39 	.word	0x08003f39
 8003e08:	08003f39 	.word	0x08003f39
 8003e0c:	08003f39 	.word	0x08003f39
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003f39 	.word	0x08003f39
 8003e18:	08003f39 	.word	0x08003f39
 8003e1c:	08003f39 	.word	0x08003f39
 8003e20:	08003eb7 	.word	0x08003eb7
 8003e24:	08003f39 	.word	0x08003f39
 8003e28:	08003f39 	.word	0x08003f39
 8003e2c:	08003f39 	.word	0x08003f39
 8003e30:	08003ef7 	.word	0x08003ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa14 	bl	8004268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
      break;
 8003e72:	e062      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa5a 	bl	8004334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	619a      	str	r2, [r3, #24]
      break;
 8003eb4:	e041      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 faa3 	bl	8004408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0208 	orr.w	r2, r2, #8
 8003ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0204 	bic.w	r2, r2, #4
 8003ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69d9      	ldr	r1, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	61da      	str	r2, [r3, #28]
      break;
 8003ef4:	e021      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 faed 	bl	80044dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69d9      	ldr	r1, [r3, #28]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	61da      	str	r2, [r3, #28]
      break;
 8003f36:	e000      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIM_ConfigClockSource+0x18>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0b3      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x180>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d03e      	beq.n	800401c <HAL_TIM_ConfigClockSource+0xd0>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	f200 8087 	bhi.w	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	f000 8085 	beq.w	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d87f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d01a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xa2>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d87b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d050      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x116>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d877      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d03c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xf6>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d873      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d058      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x136>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d86f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d064      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x156>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d86b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d060      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x156>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d867      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x156>
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d05a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fec:	e062      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6899      	ldr	r1, [r3, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f000 fc3f 	bl	8004880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004010:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e04e      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6899      	ldr	r1, [r3, #8]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f000 fc28 	bl	8004880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403e:	609a      	str	r2, [r3, #8]
      break;
 8004040:	e03b      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f000 faec 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2150      	movs	r1, #80	; 0x50
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fbf6 	bl	800484c <TIM_ITRx_SetConfig>
      break;
 8004060:	e02b      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fb46 	bl	8004700 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2160      	movs	r1, #96	; 0x60
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fbe6 	bl	800484c <TIM_ITRx_SetConfig>
      break;
 8004080:	e01b      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 facc 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fbd6 	bl	800484c <TIM_ITRx_SetConfig>
      break;
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 fbcd 	bl	800484c <TIM_ITRx_SetConfig>
        break;
 80040b2:	e002      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b0c      	cmp	r3, #12
 80040e6:	d831      	bhi.n	800414c <HAL_TIM_ReadCapturedValue+0x78>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004125 	.word	0x08004125
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	0800414d 	.word	0x0800414d
 80040fc:	0800414d 	.word	0x0800414d
 8004100:	0800412f 	.word	0x0800412f
 8004104:	0800414d 	.word	0x0800414d
 8004108:	0800414d 	.word	0x0800414d
 800410c:	0800414d 	.word	0x0800414d
 8004110:	08004139 	.word	0x08004139
 8004114:	0800414d 	.word	0x0800414d
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800414d 	.word	0x0800414d
 8004120:	08004143 	.word	0x08004143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	60fb      	str	r3, [r7, #12]

      break;
 800412c:	e00f      	b.n	800414e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	60fb      	str	r3, [r7, #12]

      break;
 8004136:	e00a      	b.n	800414e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	60fb      	str	r3, [r7, #12]

      break;
 8004140:	e005      	b.n	800414e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	60fb      	str	r3, [r7, #12]

      break;
 800414a:	e000      	b.n	800414e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800414c:	bf00      	nop
  }

  return tmpreg;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <TIM_Base_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800

08004268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0302 	bic.w	r3, r3, #2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10c      	bne.n	80042de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0308 	bic.w	r3, r3, #8
 80042ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00

08004334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0210 	bic.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <TIM_OC2_SetConfig+0xd0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10d      	bne.n	80043b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a14      	ldr	r2, [pc, #80]	; (8004404 <TIM_OC2_SetConfig+0xd0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d113      	bne.n	80043e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00

08004408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <TIM_OC3_SetConfig+0xd0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10d      	bne.n	8004482 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800446c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <TIM_OC3_SetConfig+0xd0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d113      	bne.n	80044b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	621a      	str	r2, [r3, #32]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00

080044dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <TIM_OC4_SetConfig+0x98>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d109      	bne.n	8004550 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00

08004578 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <TIM_TI1_SetConfig+0xa8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_TI1_SetConfig+0x46>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d007      	beq.n	80045be <TIM_TI1_SetConfig+0x46>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <TIM_TI1_SetConfig+0xac>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_TI1_SetConfig+0x46>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <TIM_TI1_SetConfig+0xb0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <TIM_TI1_SetConfig+0x4a>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <TIM_TI1_SetConfig+0x4c>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e003      	b.n	80045e2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f023 030a 	bic.w	r3, r3, #10
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 030a 	and.w	r3, r3, #10
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0201 	bic.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 030a 	bic.w	r3, r3, #10
 8004668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	031b      	lsls	r3, r3, #12
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f023 0210 	bic.w	r2, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	031b      	lsls	r3, r3, #12
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800473c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b087      	sub	sp, #28
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004800:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004812:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	031b      	lsls	r3, r3, #12
 8004818:	b29b      	uxth	r3, r3
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004826:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	031b      	lsls	r3, r3, #12
 800482c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	f043 0307 	orr.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048be:	b480      	push	{r7}
 80048c0:	b087      	sub	sp, #28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2201      	movs	r2, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	43db      	mvns	r3, r3
 80048e0:	401a      	ands	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
	...

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e046      	b.n	80049ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d009      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10c      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800

080049c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e03f      	b.n	8004a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc ff20 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fc85 	bl	800533c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08a      	sub	sp, #40	; 0x28
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d17c      	bne.n	8004b9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_Transmit+0x2c>
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e075      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Transmit+0x3e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e06e      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	; 0x21
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad6:	f7fd f8c3 	bl	8001c60 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x82>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b14:	e02a      	b.n	8004b6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa38 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e036      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e007      	b.n	8004b5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cf      	bne.n	8004b16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2140      	movs	r1, #64	; 0x40
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fa08 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d11d      	bne.n	8004bfc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Receive_IT+0x26>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e016      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Receive_IT+0x38>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e00f      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fa19 	bl	800502a <UART_Start_Receive_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10d      	bne.n	8004c5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_UART_IRQHandler+0x52>
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fac9 	bl	80051ea <UART_Receive_IT>
      return;
 8004c58:	e17b      	b.n	8004f52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80b1 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x1bc>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <HAL_UART_IRQHandler+0x70>
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a6 	beq.w	8004dc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_UART_IRQHandler+0x90>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xb0>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f043 0202 	orr.w	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xd0>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0204 	orr.w	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00f      	beq.n	8004d02 <HAL_UART_IRQHandler+0xfa>
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_UART_IRQHandler+0xee>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 811e 	beq.w	8004f48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_UART_IRQHandler+0x11e>
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa62 	bl	80051ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <HAL_UART_IRQHandler+0x146>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d031      	beq.n	8004db2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9a4 	bl	800509c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d023      	beq.n	8004daa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d013      	beq.n	8004da2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	4a76      	ldr	r2, [pc, #472]	; (8004f58 <HAL_UART_IRQHandler+0x350>)
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fbd0 	bl	800252c <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e00e      	b.n	8004dc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8e3 	bl	8004f6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e00a      	b.n	8004dc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8df 	bl	8004f6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	e006      	b.n	8004dc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f8db 	bl	8004f6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dbe:	e0c3      	b.n	8004f48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	bf00      	nop
    return;
 8004dc2:	e0c1      	b.n	8004f48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 80a1 	bne.w	8004f10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 809b 	beq.w	8004f10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8095 	beq.w	8004f10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04e      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e14:	8a3b      	ldrh	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8098 	beq.w	8004f4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e20:	8a3a      	ldrh	r2, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	f080 8092 	bcs.w	8004f4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8a3a      	ldrh	r2, [r7, #16]
 8004e2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d02b      	beq.n	8004e90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0210 	bic.w	r2, r2, #16
 8004e84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fb13 	bl	80024b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f86d 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ea6:	e051      	b.n	8004f4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d047      	beq.n	8004f50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ec0:	8a7b      	ldrh	r3, [r7, #18]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0210 	bic.w	r2, r2, #16
 8004f02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f04:	8a7b      	ldrh	r3, [r7, #18]
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f839 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f0e:	e01f      	b.n	8004f50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_UART_IRQHandler+0x324>
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8f9 	bl	800511c <UART_Transmit_IT>
    return;
 8004f2a:	e012      	b.n	8004f52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <HAL_UART_IRQHandler+0x34a>
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f93a 	bl	80051ba <UART_EndTransmit_IT>
    return;
 8004f46:	e004      	b.n	8004f52 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f50:	bf00      	nop
  }
}
 8004f52:	3728      	adds	r7, #40	; 0x28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	080050f5 	.word	0x080050f5

08004f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	e02c      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fae:	d028      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb6:	f7fc fe53 	bl	8001c60 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d21d      	bcs.n	8005002 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e00f      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d0c3      	beq.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	4613      	mov	r3, r2
 8005036:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2222      	movs	r2, #34	; 0x22
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0220 	orr.w	r2, r2, #32
 800508e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0210 	bic.w	r2, r2, #16
 80050da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ff2d 	bl	8004f6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b21      	cmp	r3, #33	; 0x21
 800512e:	d13e      	bne.n	80051ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d114      	bne.n	8005164 <UART_Transmit_IT+0x48>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d110      	bne.n	8005164 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005156:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]
 8005162:	e008      	b.n	8005176 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6211      	str	r1, [r2, #32]
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29b      	uxth	r3, r3
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4619      	mov	r1, r3
 8005184:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005198:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff febe 	bl	8004f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b22      	cmp	r3, #34	; 0x22
 80051fc:	f040 8099 	bne.w	8005332 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005208:	d117      	bne.n	800523a <UART_Receive_IT+0x50>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d113      	bne.n	800523a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005228:	b29a      	uxth	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28
 8005238:	e026      	b.n	8005288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524c:	d007      	beq.n	800525e <UART_Receive_IT+0x74>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <UART_Receive_IT+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e008      	b.n	800527e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005278:	b2da      	uxtb	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4619      	mov	r1, r3
 8005296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005298:	2b00      	cmp	r3, #0
 800529a:	d148      	bne.n	800532e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0220 	bic.w	r2, r2, #32
 80052aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d123      	bne.n	8005324 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0210 	bic.w	r2, r2, #16
 80052f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d10a      	bne.n	8005316 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fe2f 	bl	8004f80 <HAL_UARTEx_RxEventCallback>
 8005322:	e002      	b.n	800532a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb fb13 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e002      	b.n	8005334 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005376:	f023 030c 	bic.w	r3, r3, #12
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	430b      	orrs	r3, r1
 8005382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2c      	ldr	r2, [pc, #176]	; (8005450 <UART_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fd fede 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fd fec6 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80053b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009a      	lsls	r2, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <UART_SetConfig+0x118>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	0119      	lsls	r1, r3, #4
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009a      	lsls	r2, r3, #2
 80053dc:	441a      	add	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <UART_SetConfig+0x118>)
 80053ea:	fba3 0302 	umull	r0, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2064      	movs	r0, #100	; 0x64
 80053f2:	fb00 f303 	mul.w	r3, r0, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	3332      	adds	r3, #50	; 0x32
 80053fc:	4a15      	ldr	r2, [pc, #84]	; (8005454 <UART_SetConfig+0x118>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	4419      	add	r1, r3
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009a      	lsls	r2, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <UART_SetConfig+0x118>)
 8005422:	fba3 0302 	umull	r0, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2064      	movs	r0, #100	; 0x64
 800542a:	fb00 f303 	mul.w	r3, r0, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	4a07      	ldr	r2, [pc, #28]	; (8005454 <UART_SetConfig+0x118>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 020f 	and.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	440a      	add	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40013800 	.word	0x40013800
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000010 	.word	0x20000010

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	2600      	movs	r6, #0
 8005468:	4d0c      	ldr	r5, [pc, #48]	; (800549c <__libc_init_array+0x38>)
 800546a:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546c:	1b64      	subs	r4, r4, r5
 800546e:	10a4      	asrs	r4, r4, #2
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	f000 ffb6 	bl	80063e4 <_init>
 8005478:	2600      	movs	r6, #0
 800547a:	4d0a      	ldr	r5, [pc, #40]	; (80054a4 <__libc_init_array+0x40>)
 800547c:	4c0a      	ldr	r4, [pc, #40]	; (80054a8 <__libc_init_array+0x44>)
 800547e:	1b64      	subs	r4, r4, r5
 8005480:	10a4      	asrs	r4, r4, #2
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	080064c0 	.word	0x080064c0
 80054a0:	080064c0 	.word	0x080064c0
 80054a4:	080064c0 	.word	0x080064c0
 80054a8:	080064c4 	.word	0x080064c4

080054ac <memset>:
 80054ac:	4603      	mov	r3, r0
 80054ae:	4402      	add	r2, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <iprintf>:
 80054bc:	b40f      	push	{r0, r1, r2, r3}
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <iprintf+0x2c>)
 80054c0:	b513      	push	{r0, r1, r4, lr}
 80054c2:	681c      	ldr	r4, [r3, #0]
 80054c4:	b124      	cbz	r4, 80054d0 <iprintf+0x14>
 80054c6:	69a3      	ldr	r3, [r4, #24]
 80054c8:	b913      	cbnz	r3, 80054d0 <iprintf+0x14>
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 f866 	bl	800559c <__sinit>
 80054d0:	ab05      	add	r3, sp, #20
 80054d2:	4620      	mov	r0, r4
 80054d4:	9a04      	ldr	r2, [sp, #16]
 80054d6:	68a1      	ldr	r1, [r4, #8]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	f000 f9bb 	bl	8005854 <_vfiprintf_r>
 80054de:	b002      	add	sp, #8
 80054e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e4:	b004      	add	sp, #16
 80054e6:	4770      	bx	lr
 80054e8:	20000010 	.word	0x20000010

080054ec <std>:
 80054ec:	2300      	movs	r3, #0
 80054ee:	b510      	push	{r4, lr}
 80054f0:	4604      	mov	r4, r0
 80054f2:	e9c0 3300 	strd	r3, r3, [r0]
 80054f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054fa:	6083      	str	r3, [r0, #8]
 80054fc:	8181      	strh	r1, [r0, #12]
 80054fe:	6643      	str	r3, [r0, #100]	; 0x64
 8005500:	81c2      	strh	r2, [r0, #14]
 8005502:	6183      	str	r3, [r0, #24]
 8005504:	4619      	mov	r1, r3
 8005506:	2208      	movs	r2, #8
 8005508:	305c      	adds	r0, #92	; 0x5c
 800550a:	f7ff ffcf 	bl	80054ac <memset>
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <std+0x38>)
 8005510:	6224      	str	r4, [r4, #32]
 8005512:	6263      	str	r3, [r4, #36]	; 0x24
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <std+0x3c>)
 8005516:	62a3      	str	r3, [r4, #40]	; 0x28
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <std+0x40>)
 800551a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <std+0x44>)
 800551e:	6323      	str	r3, [r4, #48]	; 0x30
 8005520:	bd10      	pop	{r4, pc}
 8005522:	bf00      	nop
 8005524:	08005e01 	.word	0x08005e01
 8005528:	08005e23 	.word	0x08005e23
 800552c:	08005e5b 	.word	0x08005e5b
 8005530:	08005e7f 	.word	0x08005e7f

08005534 <_cleanup_r>:
 8005534:	4901      	ldr	r1, [pc, #4]	; (800553c <_cleanup_r+0x8>)
 8005536:	f000 b8af 	b.w	8005698 <_fwalk_reent>
 800553a:	bf00      	nop
 800553c:	08006151 	.word	0x08006151

08005540 <__sfmoreglue>:
 8005540:	2268      	movs	r2, #104	; 0x68
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	1e4d      	subs	r5, r1, #1
 8005546:	4355      	muls	r5, r2
 8005548:	460e      	mov	r6, r1
 800554a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800554e:	f000 f8e5 	bl	800571c <_malloc_r>
 8005552:	4604      	mov	r4, r0
 8005554:	b140      	cbz	r0, 8005568 <__sfmoreglue+0x28>
 8005556:	2100      	movs	r1, #0
 8005558:	e9c0 1600 	strd	r1, r6, [r0]
 800555c:	300c      	adds	r0, #12
 800555e:	60a0      	str	r0, [r4, #8]
 8005560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005564:	f7ff ffa2 	bl	80054ac <memset>
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}

0800556c <__sfp_lock_acquire>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__sfp_lock_acquire+0x8>)
 800556e:	f000 b8b3 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	2000025d 	.word	0x2000025d

08005578 <__sfp_lock_release>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__sfp_lock_release+0x8>)
 800557a:	f000 b8ae 	b.w	80056da <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	2000025d 	.word	0x2000025d

08005584 <__sinit_lock_acquire>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__sinit_lock_acquire+0x8>)
 8005586:	f000 b8a7 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	2000025e 	.word	0x2000025e

08005590 <__sinit_lock_release>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__sinit_lock_release+0x8>)
 8005592:	f000 b8a2 	b.w	80056da <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	2000025e 	.word	0x2000025e

0800559c <__sinit>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	f7ff fff0 	bl	8005584 <__sinit_lock_acquire>
 80055a4:	69a3      	ldr	r3, [r4, #24]
 80055a6:	b11b      	cbz	r3, 80055b0 <__sinit+0x14>
 80055a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ac:	f7ff bff0 	b.w	8005590 <__sinit_lock_release>
 80055b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055b4:	6523      	str	r3, [r4, #80]	; 0x50
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <__sinit+0x68>)
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <__sinit+0x6c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80055be:	42a3      	cmp	r3, r4
 80055c0:	bf08      	it	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	4620      	mov	r0, r4
 80055c6:	bf08      	it	eq
 80055c8:	61a3      	streq	r3, [r4, #24]
 80055ca:	f000 f81f 	bl	800560c <__sfp>
 80055ce:	6060      	str	r0, [r4, #4]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 f81b 	bl	800560c <__sfp>
 80055d6:	60a0      	str	r0, [r4, #8]
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f817 	bl	800560c <__sfp>
 80055de:	2200      	movs	r2, #0
 80055e0:	2104      	movs	r1, #4
 80055e2:	60e0      	str	r0, [r4, #12]
 80055e4:	6860      	ldr	r0, [r4, #4]
 80055e6:	f7ff ff81 	bl	80054ec <std>
 80055ea:	2201      	movs	r2, #1
 80055ec:	2109      	movs	r1, #9
 80055ee:	68a0      	ldr	r0, [r4, #8]
 80055f0:	f7ff ff7c 	bl	80054ec <std>
 80055f4:	2202      	movs	r2, #2
 80055f6:	2112      	movs	r1, #18
 80055f8:	68e0      	ldr	r0, [r4, #12]
 80055fa:	f7ff ff77 	bl	80054ec <std>
 80055fe:	2301      	movs	r3, #1
 8005600:	61a3      	str	r3, [r4, #24]
 8005602:	e7d1      	b.n	80055a8 <__sinit+0xc>
 8005604:	08006428 	.word	0x08006428
 8005608:	08005535 	.word	0x08005535

0800560c <__sfp>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	4607      	mov	r7, r0
 8005610:	f7ff ffac 	bl	800556c <__sfp_lock_acquire>
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <__sfp+0x84>)
 8005616:	681e      	ldr	r6, [r3, #0]
 8005618:	69b3      	ldr	r3, [r6, #24]
 800561a:	b913      	cbnz	r3, 8005622 <__sfp+0x16>
 800561c:	4630      	mov	r0, r6
 800561e:	f7ff ffbd 	bl	800559c <__sinit>
 8005622:	3648      	adds	r6, #72	; 0x48
 8005624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005628:	3b01      	subs	r3, #1
 800562a:	d503      	bpl.n	8005634 <__sfp+0x28>
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	b30b      	cbz	r3, 8005674 <__sfp+0x68>
 8005630:	6836      	ldr	r6, [r6, #0]
 8005632:	e7f7      	b.n	8005624 <__sfp+0x18>
 8005634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005638:	b9d5      	cbnz	r5, 8005670 <__sfp+0x64>
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <__sfp+0x88>)
 800563c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005640:	60e3      	str	r3, [r4, #12]
 8005642:	6665      	str	r5, [r4, #100]	; 0x64
 8005644:	f000 f847 	bl	80056d6 <__retarget_lock_init_recursive>
 8005648:	f7ff ff96 	bl	8005578 <__sfp_lock_release>
 800564c:	2208      	movs	r2, #8
 800564e:	4629      	mov	r1, r5
 8005650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005658:	6025      	str	r5, [r4, #0]
 800565a:	61a5      	str	r5, [r4, #24]
 800565c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005660:	f7ff ff24 	bl	80054ac <memset>
 8005664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800566c:	4620      	mov	r0, r4
 800566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005670:	3468      	adds	r4, #104	; 0x68
 8005672:	e7d9      	b.n	8005628 <__sfp+0x1c>
 8005674:	2104      	movs	r1, #4
 8005676:	4638      	mov	r0, r7
 8005678:	f7ff ff62 	bl	8005540 <__sfmoreglue>
 800567c:	4604      	mov	r4, r0
 800567e:	6030      	str	r0, [r6, #0]
 8005680:	2800      	cmp	r0, #0
 8005682:	d1d5      	bne.n	8005630 <__sfp+0x24>
 8005684:	f7ff ff78 	bl	8005578 <__sfp_lock_release>
 8005688:	230c      	movs	r3, #12
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	e7ee      	b.n	800566c <__sfp+0x60>
 800568e:	bf00      	nop
 8005690:	08006428 	.word	0x08006428
 8005694:	ffff0001 	.word	0xffff0001

08005698 <_fwalk_reent>:
 8005698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800569c:	4606      	mov	r6, r0
 800569e:	4688      	mov	r8, r1
 80056a0:	2700      	movs	r7, #0
 80056a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056aa:	f1b9 0901 	subs.w	r9, r9, #1
 80056ae:	d505      	bpl.n	80056bc <_fwalk_reent+0x24>
 80056b0:	6824      	ldr	r4, [r4, #0]
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	d1f7      	bne.n	80056a6 <_fwalk_reent+0xe>
 80056b6:	4638      	mov	r0, r7
 80056b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056bc:	89ab      	ldrh	r3, [r5, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d907      	bls.n	80056d2 <_fwalk_reent+0x3a>
 80056c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056c6:	3301      	adds	r3, #1
 80056c8:	d003      	beq.n	80056d2 <_fwalk_reent+0x3a>
 80056ca:	4629      	mov	r1, r5
 80056cc:	4630      	mov	r0, r6
 80056ce:	47c0      	blx	r8
 80056d0:	4307      	orrs	r7, r0
 80056d2:	3568      	adds	r5, #104	; 0x68
 80056d4:	e7e9      	b.n	80056aa <_fwalk_reent+0x12>

080056d6 <__retarget_lock_init_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <__retarget_lock_acquire_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_release_recursive>:
 80056da:	4770      	bx	lr

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0e      	ldr	r6, [pc, #56]	; (8005718 <sbrk_aligned+0x3c>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 fb7a 	bl	8005de0 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fb75 	bl	8005de0 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <sbrk_aligned+0x34>
 80056fa:	1cc4      	adds	r4, r0, #3
 80056fc:	f024 0403 	bic.w	r4, r4, #3
 8005700:	42a0      	cmp	r0, r4
 8005702:	d007      	beq.n	8005714 <sbrk_aligned+0x38>
 8005704:	1a21      	subs	r1, r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fb6a 	bl	8005de0 <_sbrk_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d101      	bne.n	8005714 <sbrk_aligned+0x38>
 8005710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005714:	4620      	mov	r0, r4
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20000264 	.word	0x20000264

0800571c <_malloc_r>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4607      	mov	r7, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d905      	bls.n	8005744 <_malloc_r+0x28>
 8005738:	230c      	movs	r3, #12
 800573a:	2600      	movs	r6, #0
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4630      	mov	r0, r6
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	4e2e      	ldr	r6, [pc, #184]	; (8005800 <_malloc_r+0xe4>)
 8005746:	f000 fdc5 	bl	80062d4 <__malloc_lock>
 800574a:	6833      	ldr	r3, [r6, #0]
 800574c:	461c      	mov	r4, r3
 800574e:	bb34      	cbnz	r4, 800579e <_malloc_r+0x82>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ffc2 	bl	80056dc <sbrk_aligned>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	4604      	mov	r4, r0
 800575c:	d14d      	bne.n	80057fa <_malloc_r+0xde>
 800575e:	6834      	ldr	r4, [r6, #0]
 8005760:	4626      	mov	r6, r4
 8005762:	2e00      	cmp	r6, #0
 8005764:	d140      	bne.n	80057e8 <_malloc_r+0xcc>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4631      	mov	r1, r6
 800576a:	4638      	mov	r0, r7
 800576c:	eb04 0803 	add.w	r8, r4, r3
 8005770:	f000 fb36 	bl	8005de0 <_sbrk_r>
 8005774:	4580      	cmp	r8, r0
 8005776:	d13a      	bne.n	80057ee <_malloc_r+0xd2>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	3503      	adds	r5, #3
 800577c:	1a6d      	subs	r5, r5, r1
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	4638      	mov	r0, r7
 800578c:	4629      	mov	r1, r5
 800578e:	f7ff ffa5 	bl	80056dc <sbrk_aligned>
 8005792:	3001      	adds	r0, #1
 8005794:	d02b      	beq.n	80057ee <_malloc_r+0xd2>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	442b      	add	r3, r5
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	e00e      	b.n	80057bc <_malloc_r+0xa0>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	1b52      	subs	r2, r2, r5
 80057a2:	d41e      	bmi.n	80057e2 <_malloc_r+0xc6>
 80057a4:	2a0b      	cmp	r2, #11
 80057a6:	d916      	bls.n	80057d6 <_malloc_r+0xba>
 80057a8:	1961      	adds	r1, r4, r5
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6025      	str	r5, [r4, #0]
 80057ae:	bf18      	it	ne
 80057b0:	6059      	strne	r1, [r3, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	bf08      	it	eq
 80057b6:	6031      	streq	r1, [r6, #0]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4638      	mov	r0, r7
 80057be:	f104 060b 	add.w	r6, r4, #11
 80057c2:	f000 fd8d 	bl	80062e0 <__malloc_unlock>
 80057c6:	f026 0607 	bic.w	r6, r6, #7
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	1af2      	subs	r2, r6, r3
 80057ce:	d0b6      	beq.n	800573e <_malloc_r+0x22>
 80057d0:	1b9b      	subs	r3, r3, r6
 80057d2:	50a3      	str	r3, [r4, r2]
 80057d4:	e7b3      	b.n	800573e <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	6032      	streq	r2, [r6, #0]
 80057de:	605a      	strne	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa0>
 80057e2:	4623      	mov	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7b2      	b.n	800574e <_malloc_r+0x32>
 80057e8:	4634      	mov	r4, r6
 80057ea:	6876      	ldr	r6, [r6, #4]
 80057ec:	e7b9      	b.n	8005762 <_malloc_r+0x46>
 80057ee:	230c      	movs	r3, #12
 80057f0:	4638      	mov	r0, r7
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	f000 fd74 	bl	80062e0 <__malloc_unlock>
 80057f8:	e7a1      	b.n	800573e <_malloc_r+0x22>
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa0>
 80057fe:	bf00      	nop
 8005800:	20000260 	.word	0x20000260

08005804 <__sfputc_r>:
 8005804:	6893      	ldr	r3, [r2, #8]
 8005806:	b410      	push	{r4}
 8005808:	3b01      	subs	r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	6093      	str	r3, [r2, #8]
 800580e:	da07      	bge.n	8005820 <__sfputc_r+0x1c>
 8005810:	6994      	ldr	r4, [r2, #24]
 8005812:	42a3      	cmp	r3, r4
 8005814:	db01      	blt.n	800581a <__sfputc_r+0x16>
 8005816:	290a      	cmp	r1, #10
 8005818:	d102      	bne.n	8005820 <__sfputc_r+0x1c>
 800581a:	bc10      	pop	{r4}
 800581c:	f000 bb34 	b.w	8005e88 <__swbuf_r>
 8005820:	6813      	ldr	r3, [r2, #0]
 8005822:	1c58      	adds	r0, r3, #1
 8005824:	6010      	str	r0, [r2, #0]
 8005826:	7019      	strb	r1, [r3, #0]
 8005828:	4608      	mov	r0, r1
 800582a:	bc10      	pop	{r4}
 800582c:	4770      	bx	lr

0800582e <__sfputs_r>:
 800582e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005830:	4606      	mov	r6, r0
 8005832:	460f      	mov	r7, r1
 8005834:	4614      	mov	r4, r2
 8005836:	18d5      	adds	r5, r2, r3
 8005838:	42ac      	cmp	r4, r5
 800583a:	d101      	bne.n	8005840 <__sfputs_r+0x12>
 800583c:	2000      	movs	r0, #0
 800583e:	e007      	b.n	8005850 <__sfputs_r+0x22>
 8005840:	463a      	mov	r2, r7
 8005842:	4630      	mov	r0, r6
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	f7ff ffdc 	bl	8005804 <__sfputc_r>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d1f3      	bne.n	8005838 <__sfputs_r+0xa>
 8005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005854 <_vfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	460d      	mov	r5, r1
 800585a:	4614      	mov	r4, r2
 800585c:	4698      	mov	r8, r3
 800585e:	4606      	mov	r6, r0
 8005860:	b09d      	sub	sp, #116	; 0x74
 8005862:	b118      	cbz	r0, 800586c <_vfiprintf_r+0x18>
 8005864:	6983      	ldr	r3, [r0, #24]
 8005866:	b90b      	cbnz	r3, 800586c <_vfiprintf_r+0x18>
 8005868:	f7ff fe98 	bl	800559c <__sinit>
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <_vfiprintf_r+0x240>)
 800586e:	429d      	cmp	r5, r3
 8005870:	d11b      	bne.n	80058aa <_vfiprintf_r+0x56>
 8005872:	6875      	ldr	r5, [r6, #4]
 8005874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005876:	07d9      	lsls	r1, r3, #31
 8005878:	d405      	bmi.n	8005886 <_vfiprintf_r+0x32>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d402      	bmi.n	8005886 <_vfiprintf_r+0x32>
 8005880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005882:	f7ff ff29 	bl	80056d8 <__retarget_lock_acquire_recursive>
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	d501      	bpl.n	8005890 <_vfiprintf_r+0x3c>
 800588c:	692b      	ldr	r3, [r5, #16]
 800588e:	b9eb      	cbnz	r3, 80058cc <_vfiprintf_r+0x78>
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f000 fb5c 	bl	8005f50 <__swsetup_r>
 8005898:	b1c0      	cbz	r0, 80058cc <_vfiprintf_r+0x78>
 800589a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589c:	07dc      	lsls	r4, r3, #31
 800589e:	d50e      	bpl.n	80058be <_vfiprintf_r+0x6a>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a4:	b01d      	add	sp, #116	; 0x74
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <_vfiprintf_r+0x244>)
 80058ac:	429d      	cmp	r5, r3
 80058ae:	d101      	bne.n	80058b4 <_vfiprintf_r+0x60>
 80058b0:	68b5      	ldr	r5, [r6, #8]
 80058b2:	e7df      	b.n	8005874 <_vfiprintf_r+0x20>
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <_vfiprintf_r+0x248>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf08      	it	eq
 80058ba:	68f5      	ldreq	r5, [r6, #12]
 80058bc:	e7da      	b.n	8005874 <_vfiprintf_r+0x20>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	0598      	lsls	r0, r3, #22
 80058c2:	d4ed      	bmi.n	80058a0 <_vfiprintf_r+0x4c>
 80058c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c6:	f7ff ff08 	bl	80056da <__retarget_lock_release_recursive>
 80058ca:	e7e9      	b.n	80058a0 <_vfiprintf_r+0x4c>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	2320      	movs	r3, #32
 80058d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d6:	2330      	movs	r3, #48	; 0x30
 80058d8:	f04f 0901 	mov.w	r9, #1
 80058dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005aa0 <_vfiprintf_r+0x24c>
 80058e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e8:	4623      	mov	r3, r4
 80058ea:	469a      	mov	sl, r3
 80058ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f0:	b10a      	cbz	r2, 80058f6 <_vfiprintf_r+0xa2>
 80058f2:	2a25      	cmp	r2, #37	; 0x25
 80058f4:	d1f9      	bne.n	80058ea <_vfiprintf_r+0x96>
 80058f6:	ebba 0b04 	subs.w	fp, sl, r4
 80058fa:	d00b      	beq.n	8005914 <_vfiprintf_r+0xc0>
 80058fc:	465b      	mov	r3, fp
 80058fe:	4622      	mov	r2, r4
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ff93 	bl	800582e <__sfputs_r>
 8005908:	3001      	adds	r0, #1
 800590a:	f000 80aa 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800590e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005910:	445a      	add	r2, fp
 8005912:	9209      	str	r2, [sp, #36]	; 0x24
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a2 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800591e:	2300      	movs	r3, #0
 8005920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005928:	f10a 0a01 	add.w	sl, sl, #1
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005934:	931a      	str	r3, [sp, #104]	; 0x68
 8005936:	4654      	mov	r4, sl
 8005938:	2205      	movs	r2, #5
 800593a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593e:	4858      	ldr	r0, [pc, #352]	; (8005aa0 <_vfiprintf_r+0x24c>)
 8005940:	f000 fcba 	bl	80062b8 <memchr>
 8005944:	9a04      	ldr	r2, [sp, #16]
 8005946:	b9d8      	cbnz	r0, 8005980 <_vfiprintf_r+0x12c>
 8005948:	06d1      	lsls	r1, r2, #27
 800594a:	bf44      	itt	mi
 800594c:	2320      	movmi	r3, #32
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005952:	0713      	lsls	r3, r2, #28
 8005954:	bf44      	itt	mi
 8005956:	232b      	movmi	r3, #43	; 0x2b
 8005958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595c:	f89a 3000 	ldrb.w	r3, [sl]
 8005960:	2b2a      	cmp	r3, #42	; 0x2a
 8005962:	d015      	beq.n	8005990 <_vfiprintf_r+0x13c>
 8005964:	4654      	mov	r4, sl
 8005966:	2000      	movs	r0, #0
 8005968:	f04f 0c0a 	mov.w	ip, #10
 800596c:	9a07      	ldr	r2, [sp, #28]
 800596e:	4621      	mov	r1, r4
 8005970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	2b09      	cmp	r3, #9
 8005978:	d94e      	bls.n	8005a18 <_vfiprintf_r+0x1c4>
 800597a:	b1b0      	cbz	r0, 80059aa <_vfiprintf_r+0x156>
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	e014      	b.n	80059aa <_vfiprintf_r+0x156>
 8005980:	eba0 0308 	sub.w	r3, r0, r8
 8005984:	fa09 f303 	lsl.w	r3, r9, r3
 8005988:	4313      	orrs	r3, r2
 800598a:	46a2      	mov	sl, r4
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	e7d2      	b.n	8005936 <_vfiprintf_r+0xe2>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	9103      	str	r1, [sp, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bfbb      	ittet	lt
 800599c:	425b      	neglt	r3, r3
 800599e:	f042 0202 	orrlt.w	r2, r2, #2
 80059a2:	9307      	strge	r3, [sp, #28]
 80059a4:	9307      	strlt	r3, [sp, #28]
 80059a6:	bfb8      	it	lt
 80059a8:	9204      	strlt	r2, [sp, #16]
 80059aa:	7823      	ldrb	r3, [r4, #0]
 80059ac:	2b2e      	cmp	r3, #46	; 0x2e
 80059ae:	d10c      	bne.n	80059ca <_vfiprintf_r+0x176>
 80059b0:	7863      	ldrb	r3, [r4, #1]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d135      	bne.n	8005a22 <_vfiprintf_r+0x1ce>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	3402      	adds	r4, #2
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfb8      	it	lt
 80059c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059c8:	9305      	str	r3, [sp, #20]
 80059ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005aa4 <_vfiprintf_r+0x250>
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	7821      	ldrb	r1, [r4, #0]
 80059d4:	f000 fc70 	bl	80062b8 <memchr>
 80059d8:	b140      	cbz	r0, 80059ec <_vfiprintf_r+0x198>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	eba0 000a 	sub.w	r0, r0, sl
 80059e0:	fa03 f000 	lsl.w	r0, r3, r0
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	3401      	adds	r4, #1
 80059e8:	4303      	orrs	r3, r0
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	2206      	movs	r2, #6
 80059f2:	482d      	ldr	r0, [pc, #180]	; (8005aa8 <_vfiprintf_r+0x254>)
 80059f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f8:	f000 fc5e 	bl	80062b8 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d03f      	beq.n	8005a80 <_vfiprintf_r+0x22c>
 8005a00:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <_vfiprintf_r+0x258>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_vfiprintf_r+0x1f8>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	443b      	add	r3, r7
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e767      	b.n	80058e8 <_vfiprintf_r+0x94>
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a20:	e7a5      	b.n	800596e <_vfiprintf_r+0x11a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4619      	mov	r1, r3
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_vfiprintf_r+0x1ee>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c5      	beq.n	80059ca <_vfiprintf_r+0x176>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c3      	b.n	80059ca <_vfiprintf_r+0x176>
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4a:	e7f0      	b.n	8005a2e <_vfiprintf_r+0x1da>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <_vfiprintf_r+0x25c>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	f3af 8000 	nop.w
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	1c78      	adds	r0, r7, #1
 8005a60:	d1d6      	bne.n	8005a10 <_vfiprintf_r+0x1bc>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d405      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a68:	89ab      	ldrh	r3, [r5, #12]
 8005a6a:	059a      	lsls	r2, r3, #22
 8005a6c:	d402      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a70:	f7ff fe33 	bl	80056da <__retarget_lock_release_recursive>
 8005a74:	89ab      	ldrh	r3, [r5, #12]
 8005a76:	065b      	lsls	r3, r3, #25
 8005a78:	f53f af12 	bmi.w	80058a0 <_vfiprintf_r+0x4c>
 8005a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a7e:	e711      	b.n	80058a4 <_vfiprintf_r+0x50>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <_vfiprintf_r+0x25c>)
 8005a8a:	a904      	add	r1, sp, #16
 8005a8c:	f000 f882 	bl	8005b94 <_printf_i>
 8005a90:	e7e4      	b.n	8005a5c <_vfiprintf_r+0x208>
 8005a92:	bf00      	nop
 8005a94:	0800644c 	.word	0x0800644c
 8005a98:	0800646c 	.word	0x0800646c
 8005a9c:	0800642c 	.word	0x0800642c
 8005aa0:	0800648c 	.word	0x0800648c
 8005aa4:	08006492 	.word	0x08006492
 8005aa8:	08006496 	.word	0x08006496
 8005aac:	00000000 	.word	0x00000000
 8005ab0:	0800582f 	.word	0x0800582f

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	bfb8      	it	lt
 8005ac6:	4613      	movlt	r3, r2
 8005ac8:	6033      	str	r3, [r6, #0]
 8005aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ace:	460c      	mov	r4, r1
 8005ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc28      	bgt.n	8005b4e <_printf_common+0x9a>
 8005afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b00:	1e13      	subs	r3, r2, #0
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42d      	bmi.n	8005b68 <_printf_common+0xb4>
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d020      	beq.n	8005b5c <_printf_common+0xa8>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	68e5      	ldr	r5, [r4, #12]
 8005b1e:	f003 0306 	and.w	r3, r3, #6
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	bf18      	it	ne
 8005b26:	2500      	movne	r5, #0
 8005b28:	6832      	ldr	r2, [r6, #0]
 8005b2a:	f04f 0600 	mov.w	r6, #0
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	bf08      	it	eq
 8005b32:	1aad      	subeq	r5, r5, r2
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	bf08      	it	eq
 8005b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bfc4      	itt	gt
 8005b40:	1a9b      	subgt	r3, r3, r2
 8005b42:	18ed      	addgt	r5, r5, r3
 8005b44:	341a      	adds	r4, #26
 8005b46:	42b5      	cmp	r5, r6
 8005b48:	d11a      	bne.n	8005b80 <_printf_common+0xcc>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e008      	b.n	8005b60 <_printf_common+0xac>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4649      	mov	r1, r9
 8005b54:	4638      	mov	r0, r7
 8005b56:	47c0      	blx	r8
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d103      	bne.n	8005b64 <_printf_common+0xb0>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7c4      	b.n	8005af2 <_printf_common+0x3e>
 8005b68:	2030      	movs	r0, #48	; 0x30
 8005b6a:	18e1      	adds	r1, r4, r3
 8005b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b76:	4422      	add	r2, r4
 8005b78:	3302      	adds	r3, #2
 8005b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b7e:	e7c5      	b.n	8005b0c <_printf_common+0x58>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4622      	mov	r2, r4
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d0e6      	beq.n	8005b5c <_printf_common+0xa8>
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7d9      	b.n	8005b46 <_printf_common+0x92>
	...

08005b94 <_printf_i>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	7e0f      	ldrb	r7, [r1, #24]
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005baa:	d807      	bhi.n	8005bbc <_printf_i+0x28>
 8005bac:	2f62      	cmp	r7, #98	; 0x62
 8005bae:	d80a      	bhi.n	8005bc6 <_printf_i+0x32>
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	f000 80d9 	beq.w	8005d68 <_printf_i+0x1d4>
 8005bb6:	2f58      	cmp	r7, #88	; 0x58
 8005bb8:	f000 80a4 	beq.w	8005d04 <_printf_i+0x170>
 8005bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc4:	e03a      	b.n	8005c3c <_printf_i+0xa8>
 8005bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bca:	2b15      	cmp	r3, #21
 8005bcc:	d8f6      	bhi.n	8005bbc <_printf_i+0x28>
 8005bce:	a101      	add	r1, pc, #4	; (adr r1, 8005bd4 <_printf_i+0x40>)
 8005bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005bbd 	.word	0x08005bbd
 8005be0:	08005bbd 	.word	0x08005bbd
 8005be4:	08005bbd 	.word	0x08005bbd
 8005be8:	08005bbd 	.word	0x08005bbd
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005bbd 	.word	0x08005bbd
 8005bf4:	08005bbd 	.word	0x08005bbd
 8005bf8:	08005bbd 	.word	0x08005bbd
 8005bfc:	08005bbd 	.word	0x08005bbd
 8005c00:	08005d4f 	.word	0x08005d4f
 8005c04:	08005c71 	.word	0x08005c71
 8005c08:	08005d31 	.word	0x08005d31
 8005c0c:	08005bbd 	.word	0x08005bbd
 8005c10:	08005bbd 	.word	0x08005bbd
 8005c14:	08005d71 	.word	0x08005d71
 8005c18:	08005bbd 	.word	0x08005bbd
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005bbd 	.word	0x08005bbd
 8005c24:	08005bbd 	.word	0x08005bbd
 8005c28:	08005d39 	.word	0x08005d39
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0a4      	b.n	8005d8a <_printf_i+0x1f6>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	6829      	ldr	r1, [r5, #0]
 8005c44:	0606      	lsls	r6, r0, #24
 8005c46:	f101 0304 	add.w	r3, r1, #4
 8005c4a:	d50a      	bpl.n	8005c62 <_printf_i+0xce>
 8005c4c:	680e      	ldr	r6, [r1, #0]
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	da03      	bge.n	8005c5c <_printf_i+0xc8>
 8005c54:	232d      	movs	r3, #45	; 0x2d
 8005c56:	4276      	negs	r6, r6
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	230a      	movs	r3, #10
 8005c5e:	485e      	ldr	r0, [pc, #376]	; (8005dd8 <_printf_i+0x244>)
 8005c60:	e019      	b.n	8005c96 <_printf_i+0x102>
 8005c62:	680e      	ldr	r6, [r1, #0]
 8005c64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	bf18      	it	ne
 8005c6c:	b236      	sxthne	r6, r6
 8005c6e:	e7ef      	b.n	8005c50 <_printf_i+0xbc>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	1d19      	adds	r1, r3, #4
 8005c76:	6029      	str	r1, [r5, #0]
 8005c78:	0601      	lsls	r1, r0, #24
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0xec>
 8005c7c:	681e      	ldr	r6, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0xf2>
 8005c80:	0646      	lsls	r6, r0, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0xe8>
 8005c84:	881e      	ldrh	r6, [r3, #0]
 8005c86:	2f6f      	cmp	r7, #111	; 0x6f
 8005c88:	bf0c      	ite	eq
 8005c8a:	2308      	moveq	r3, #8
 8005c8c:	230a      	movne	r3, #10
 8005c8e:	4852      	ldr	r0, [pc, #328]	; (8005dd8 <_printf_i+0x244>)
 8005c90:	2100      	movs	r1, #0
 8005c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c96:	6865      	ldr	r5, [r4, #4]
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	bfa8      	it	ge
 8005c9c:	6821      	ldrge	r1, [r4, #0]
 8005c9e:	60a5      	str	r5, [r4, #8]
 8005ca0:	bfa4      	itt	ge
 8005ca2:	f021 0104 	bicge.w	r1, r1, #4
 8005ca6:	6021      	strge	r1, [r4, #0]
 8005ca8:	b90e      	cbnz	r6, 8005cae <_printf_i+0x11a>
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	d04d      	beq.n	8005d4a <_printf_i+0x1b6>
 8005cae:	4615      	mov	r5, r2
 8005cb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cb4:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb8:	5dc7      	ldrb	r7, [r0, r7]
 8005cba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cbe:	4637      	mov	r7, r6
 8005cc0:	42bb      	cmp	r3, r7
 8005cc2:	460e      	mov	r6, r1
 8005cc4:	d9f4      	bls.n	8005cb0 <_printf_i+0x11c>
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d10b      	bne.n	8005ce2 <_printf_i+0x14e>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	07de      	lsls	r6, r3, #31
 8005cce:	d508      	bpl.n	8005ce2 <_printf_i+0x14e>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	6861      	ldr	r1, [r4, #4]
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	bfde      	ittt	le
 8005cd8:	2330      	movle	r3, #48	; 0x30
 8005cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ce2:	1b52      	subs	r2, r2, r5
 8005ce4:	6122      	str	r2, [r4, #16]
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f8cd a000 	str.w	sl, [sp]
 8005cf0:	aa03      	add	r2, sp, #12
 8005cf2:	f7ff fedf 	bl	8005ab4 <_printf_common>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d14c      	bne.n	8005d94 <_printf_i+0x200>
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cfe:	b004      	add	sp, #16
 8005d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d04:	4834      	ldr	r0, [pc, #208]	; (8005dd8 <_printf_i+0x244>)
 8005d06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d0a:	6829      	ldr	r1, [r5, #0]
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d12:	6029      	str	r1, [r5, #0]
 8005d14:	061d      	lsls	r5, r3, #24
 8005d16:	d514      	bpl.n	8005d42 <_printf_i+0x1ae>
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	bf44      	itt	mi
 8005d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d20:	6023      	strmi	r3, [r4, #0]
 8005d22:	b91e      	cbnz	r6, 8005d2c <_printf_i+0x198>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	f023 0320 	bic.w	r3, r3, #32
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	e7af      	b.n	8005c90 <_printf_i+0xfc>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	f043 0320 	orr.w	r3, r3, #32
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	2378      	movs	r3, #120	; 0x78
 8005d3a:	4828      	ldr	r0, [pc, #160]	; (8005ddc <_printf_i+0x248>)
 8005d3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d40:	e7e3      	b.n	8005d0a <_printf_i+0x176>
 8005d42:	0659      	lsls	r1, r3, #25
 8005d44:	bf48      	it	mi
 8005d46:	b2b6      	uxthmi	r6, r6
 8005d48:	e7e6      	b.n	8005d18 <_printf_i+0x184>
 8005d4a:	4615      	mov	r5, r2
 8005d4c:	e7bb      	b.n	8005cc6 <_printf_i+0x132>
 8005d4e:	682b      	ldr	r3, [r5, #0]
 8005d50:	6826      	ldr	r6, [r4, #0]
 8005d52:	1d18      	adds	r0, r3, #4
 8005d54:	6961      	ldr	r1, [r4, #20]
 8005d56:	6028      	str	r0, [r5, #0]
 8005d58:	0635      	lsls	r5, r6, #24
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	d501      	bpl.n	8005d62 <_printf_i+0x1ce>
 8005d5e:	6019      	str	r1, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <_printf_i+0x1d4>
 8005d62:	0670      	lsls	r0, r6, #25
 8005d64:	d5fb      	bpl.n	8005d5e <_printf_i+0x1ca>
 8005d66:	8019      	strh	r1, [r3, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	e7ba      	b.n	8005ce6 <_printf_i+0x152>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	2100      	movs	r1, #0
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	681d      	ldr	r5, [r3, #0]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 fa9b 	bl	80062b8 <memchr>
 8005d82:	b108      	cbz	r0, 8005d88 <_printf_i+0x1f4>
 8005d84:	1b40      	subs	r0, r0, r5
 8005d86:	6060      	str	r0, [r4, #4]
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d92:	e7a8      	b.n	8005ce6 <_printf_i+0x152>
 8005d94:	462a      	mov	r2, r5
 8005d96:	4649      	mov	r1, r9
 8005d98:	4640      	mov	r0, r8
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	47d0      	blx	sl
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d0ab      	beq.n	8005cfa <_printf_i+0x166>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	079b      	lsls	r3, r3, #30
 8005da6:	d413      	bmi.n	8005dd0 <_printf_i+0x23c>
 8005da8:	68e0      	ldr	r0, [r4, #12]
 8005daa:	9b03      	ldr	r3, [sp, #12]
 8005dac:	4298      	cmp	r0, r3
 8005dae:	bfb8      	it	lt
 8005db0:	4618      	movlt	r0, r3
 8005db2:	e7a4      	b.n	8005cfe <_printf_i+0x16a>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4632      	mov	r2, r6
 8005db8:	4649      	mov	r1, r9
 8005dba:	4640      	mov	r0, r8
 8005dbc:	47d0      	blx	sl
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d09b      	beq.n	8005cfa <_printf_i+0x166>
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	68e3      	ldr	r3, [r4, #12]
 8005dc6:	9903      	ldr	r1, [sp, #12]
 8005dc8:	1a5b      	subs	r3, r3, r1
 8005dca:	42ab      	cmp	r3, r5
 8005dcc:	dcf2      	bgt.n	8005db4 <_printf_i+0x220>
 8005dce:	e7eb      	b.n	8005da8 <_printf_i+0x214>
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	f104 0619 	add.w	r6, r4, #25
 8005dd6:	e7f5      	b.n	8005dc4 <_printf_i+0x230>
 8005dd8:	0800649d 	.word	0x0800649d
 8005ddc:	080064ae 	.word	0x080064ae

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	2300      	movs	r3, #0
 8005de4:	4d05      	ldr	r5, [pc, #20]	; (8005dfc <_sbrk_r+0x1c>)
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fb fe7e 	bl	8001aec <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000268 	.word	0x20000268

08005e00 <__sread>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 fab8 	bl	800637c <_read_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	bfab      	itete	ge
 8005e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e12:	89a3      	ldrhlt	r3, [r4, #12]
 8005e14:	181b      	addge	r3, r3, r0
 8005e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e1a:	bfac      	ite	ge
 8005e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e1e:	81a3      	strhlt	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__swrite>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	05db      	lsls	r3, r3, #23
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4616      	mov	r6, r2
 8005e32:	d505      	bpl.n	8005e40 <__swrite+0x1e>
 8005e34:	2302      	movs	r3, #2
 8005e36:	2200      	movs	r2, #0
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	f000 f9c4 	bl	80061c8 <_lseek_r>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	4632      	mov	r2, r6
 8005e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f000 b869 	b.w	8005f2c <_write_r>

08005e5a <__sseek>:
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e62:	f000 f9b1 	bl	80061c8 <_lseek_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	bf15      	itete	ne
 8005e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e76:	81a3      	strheq	r3, [r4, #12]
 8005e78:	bf18      	it	ne
 8005e7a:	81a3      	strhne	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__sclose>:
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 b8d3 	b.w	800602c <_close_r>
	...

08005e88 <__swbuf_r>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	460e      	mov	r6, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	4605      	mov	r5, r0
 8005e90:	b118      	cbz	r0, 8005e9a <__swbuf_r+0x12>
 8005e92:	6983      	ldr	r3, [r0, #24]
 8005e94:	b90b      	cbnz	r3, 8005e9a <__swbuf_r+0x12>
 8005e96:	f7ff fb81 	bl	800559c <__sinit>
 8005e9a:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <__swbuf_r+0x98>)
 8005e9c:	429c      	cmp	r4, r3
 8005e9e:	d12b      	bne.n	8005ef8 <__swbuf_r+0x70>
 8005ea0:	686c      	ldr	r4, [r5, #4]
 8005ea2:	69a3      	ldr	r3, [r4, #24]
 8005ea4:	60a3      	str	r3, [r4, #8]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	071a      	lsls	r2, r3, #28
 8005eaa:	d52f      	bpl.n	8005f0c <__swbuf_r+0x84>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	b36b      	cbz	r3, 8005f0c <__swbuf_r+0x84>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	b2f6      	uxtb	r6, r6
 8005eb6:	1ac0      	subs	r0, r0, r3
 8005eb8:	6963      	ldr	r3, [r4, #20]
 8005eba:	4637      	mov	r7, r6
 8005ebc:	4283      	cmp	r3, r0
 8005ebe:	dc04      	bgt.n	8005eca <__swbuf_r+0x42>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 f944 	bl	8006150 <_fflush_r>
 8005ec8:	bb30      	cbnz	r0, 8005f18 <__swbuf_r+0x90>
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	3001      	adds	r0, #1
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	701e      	strb	r6, [r3, #0]
 8005eda:	6963      	ldr	r3, [r4, #20]
 8005edc:	4283      	cmp	r3, r0
 8005ede:	d004      	beq.n	8005eea <__swbuf_r+0x62>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	07db      	lsls	r3, r3, #31
 8005ee4:	d506      	bpl.n	8005ef4 <__swbuf_r+0x6c>
 8005ee6:	2e0a      	cmp	r6, #10
 8005ee8:	d104      	bne.n	8005ef4 <__swbuf_r+0x6c>
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f92f 	bl	8006150 <_fflush_r>
 8005ef2:	b988      	cbnz	r0, 8005f18 <__swbuf_r+0x90>
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <__swbuf_r+0x9c>)
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d101      	bne.n	8005f02 <__swbuf_r+0x7a>
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	e7cf      	b.n	8005ea2 <__swbuf_r+0x1a>
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <__swbuf_r+0xa0>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	bf08      	it	eq
 8005f08:	68ec      	ldreq	r4, [r5, #12]
 8005f0a:	e7ca      	b.n	8005ea2 <__swbuf_r+0x1a>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f81e 	bl	8005f50 <__swsetup_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d0cb      	beq.n	8005eb0 <__swbuf_r+0x28>
 8005f18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f1c:	e7ea      	b.n	8005ef4 <__swbuf_r+0x6c>
 8005f1e:	bf00      	nop
 8005f20:	0800644c 	.word	0x0800644c
 8005f24:	0800646c 	.word	0x0800646c
 8005f28:	0800642c 	.word	0x0800642c

08005f2c <_write_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	2200      	movs	r2, #0
 8005f36:	4d05      	ldr	r5, [pc, #20]	; (8005f4c <_write_r+0x20>)
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fb fd89 	bl	8001a52 <_write>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_write_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_write_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000268 	.word	0x20000268

08005f50 <__swsetup_r>:
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <__swsetup_r+0xcc>)
 8005f52:	b570      	push	{r4, r5, r6, lr}
 8005f54:	681d      	ldr	r5, [r3, #0]
 8005f56:	4606      	mov	r6, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	b125      	cbz	r5, 8005f66 <__swsetup_r+0x16>
 8005f5c:	69ab      	ldr	r3, [r5, #24]
 8005f5e:	b913      	cbnz	r3, 8005f66 <__swsetup_r+0x16>
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7ff fb1b 	bl	800559c <__sinit>
 8005f66:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <__swsetup_r+0xd0>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d10f      	bne.n	8005f8c <__swsetup_r+0x3c>
 8005f6c:	686c      	ldr	r4, [r5, #4]
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f74:	0719      	lsls	r1, r3, #28
 8005f76:	d42c      	bmi.n	8005fd2 <__swsetup_r+0x82>
 8005f78:	06dd      	lsls	r5, r3, #27
 8005f7a:	d411      	bmi.n	8005fa0 <__swsetup_r+0x50>
 8005f7c:	2309      	movs	r3, #9
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	e03e      	b.n	800600a <__swsetup_r+0xba>
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <__swsetup_r+0xd4>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d101      	bne.n	8005f96 <__swsetup_r+0x46>
 8005f92:	68ac      	ldr	r4, [r5, #8]
 8005f94:	e7eb      	b.n	8005f6e <__swsetup_r+0x1e>
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <__swsetup_r+0xd8>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	bf08      	it	eq
 8005f9c:	68ec      	ldreq	r4, [r5, #12]
 8005f9e:	e7e6      	b.n	8005f6e <__swsetup_r+0x1e>
 8005fa0:	0758      	lsls	r0, r3, #29
 8005fa2:	d512      	bpl.n	8005fca <__swsetup_r+0x7a>
 8005fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa6:	b141      	cbz	r1, 8005fba <__swsetup_r+0x6a>
 8005fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fac:	4299      	cmp	r1, r3
 8005fae:	d002      	beq.n	8005fb6 <__swsetup_r+0x66>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f99b 	bl	80062ec <_free_r>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f043 0308 	orr.w	r3, r3, #8
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	b94b      	cbnz	r3, 8005fea <__swsetup_r+0x9a>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe0:	d003      	beq.n	8005fea <__swsetup_r+0x9a>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 f927 	bl	8006238 <__smakebuf_r>
 8005fea:	89a0      	ldrh	r0, [r4, #12]
 8005fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff0:	f010 0301 	ands.w	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <__swsetup_r+0xbc>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	6963      	ldr	r3, [r4, #20]
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	61a3      	str	r3, [r4, #24]
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	b943      	cbnz	r3, 8006016 <__swsetup_r+0xc6>
 8006004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006008:	d1ba      	bne.n	8005f80 <__swsetup_r+0x30>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	0781      	lsls	r1, r0, #30
 800600e:	bf58      	it	pl
 8006010:	6963      	ldrpl	r3, [r4, #20]
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	e7f4      	b.n	8006000 <__swsetup_r+0xb0>
 8006016:	2000      	movs	r0, #0
 8006018:	e7f7      	b.n	800600a <__swsetup_r+0xba>
 800601a:	bf00      	nop
 800601c:	20000010 	.word	0x20000010
 8006020:	0800644c 	.word	0x0800644c
 8006024:	0800646c 	.word	0x0800646c
 8006028:	0800642c 	.word	0x0800642c

0800602c <_close_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	2300      	movs	r3, #0
 8006030:	4d05      	ldr	r5, [pc, #20]	; (8006048 <_close_r+0x1c>)
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7fb fd27 	bl	8001a8a <_close>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_close_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_close_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000268 	.word	0x20000268

0800604c <__sflush_r>:
 800604c:	898a      	ldrh	r2, [r1, #12]
 800604e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006050:	4605      	mov	r5, r0
 8006052:	0710      	lsls	r0, r2, #28
 8006054:	460c      	mov	r4, r1
 8006056:	d457      	bmi.n	8006108 <__sflush_r+0xbc>
 8006058:	684b      	ldr	r3, [r1, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	dc04      	bgt.n	8006068 <__sflush_r+0x1c>
 800605e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	dc01      	bgt.n	8006068 <__sflush_r+0x1c>
 8006064:	2000      	movs	r0, #0
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606a:	2e00      	cmp	r6, #0
 800606c:	d0fa      	beq.n	8006064 <__sflush_r+0x18>
 800606e:	2300      	movs	r3, #0
 8006070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006074:	682f      	ldr	r7, [r5, #0]
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	d032      	beq.n	80060e0 <__sflush_r+0x94>
 800607a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	075a      	lsls	r2, r3, #29
 8006080:	d505      	bpl.n	800608e <__sflush_r+0x42>
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	1ac0      	subs	r0, r0, r3
 8006086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006088:	b10b      	cbz	r3, 800608e <__sflush_r+0x42>
 800608a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608c:	1ac0      	subs	r0, r0, r3
 800608e:	2300      	movs	r3, #0
 8006090:	4602      	mov	r2, r0
 8006092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006094:	4628      	mov	r0, r5
 8006096:	6a21      	ldr	r1, [r4, #32]
 8006098:	47b0      	blx	r6
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	d106      	bne.n	80060ae <__sflush_r+0x62>
 80060a0:	6829      	ldr	r1, [r5, #0]
 80060a2:	291d      	cmp	r1, #29
 80060a4:	d82c      	bhi.n	8006100 <__sflush_r+0xb4>
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <__sflush_r+0x100>)
 80060a8:	40ca      	lsrs	r2, r1
 80060aa:	07d6      	lsls	r6, r2, #31
 80060ac:	d528      	bpl.n	8006100 <__sflush_r+0xb4>
 80060ae:	2200      	movs	r2, #0
 80060b0:	6062      	str	r2, [r4, #4]
 80060b2:	6922      	ldr	r2, [r4, #16]
 80060b4:	04d9      	lsls	r1, r3, #19
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	d504      	bpl.n	80060c4 <__sflush_r+0x78>
 80060ba:	1c42      	adds	r2, r0, #1
 80060bc:	d101      	bne.n	80060c2 <__sflush_r+0x76>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	b903      	cbnz	r3, 80060c4 <__sflush_r+0x78>
 80060c2:	6560      	str	r0, [r4, #84]	; 0x54
 80060c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c6:	602f      	str	r7, [r5, #0]
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d0cb      	beq.n	8006064 <__sflush_r+0x18>
 80060cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <__sflush_r+0x8e>
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f909 	bl	80062ec <_free_r>
 80060da:	2000      	movs	r0, #0
 80060dc:	6360      	str	r0, [r4, #52]	; 0x34
 80060de:	e7c2      	b.n	8006066 <__sflush_r+0x1a>
 80060e0:	6a21      	ldr	r1, [r4, #32]
 80060e2:	2301      	movs	r3, #1
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b0      	blx	r6
 80060e8:	1c41      	adds	r1, r0, #1
 80060ea:	d1c7      	bne.n	800607c <__sflush_r+0x30>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c4      	beq.n	800607c <__sflush_r+0x30>
 80060f2:	2b1d      	cmp	r3, #29
 80060f4:	d001      	beq.n	80060fa <__sflush_r+0xae>
 80060f6:	2b16      	cmp	r3, #22
 80060f8:	d101      	bne.n	80060fe <__sflush_r+0xb2>
 80060fa:	602f      	str	r7, [r5, #0]
 80060fc:	e7b2      	b.n	8006064 <__sflush_r+0x18>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	e7ae      	b.n	8006066 <__sflush_r+0x1a>
 8006108:	690f      	ldr	r7, [r1, #16]
 800610a:	2f00      	cmp	r7, #0
 800610c:	d0aa      	beq.n	8006064 <__sflush_r+0x18>
 800610e:	0793      	lsls	r3, r2, #30
 8006110:	bf18      	it	ne
 8006112:	2300      	movne	r3, #0
 8006114:	680e      	ldr	r6, [r1, #0]
 8006116:	bf08      	it	eq
 8006118:	694b      	ldreq	r3, [r1, #20]
 800611a:	1bf6      	subs	r6, r6, r7
 800611c:	600f      	str	r7, [r1, #0]
 800611e:	608b      	str	r3, [r1, #8]
 8006120:	2e00      	cmp	r6, #0
 8006122:	dd9f      	ble.n	8006064 <__sflush_r+0x18>
 8006124:	4633      	mov	r3, r6
 8006126:	463a      	mov	r2, r7
 8006128:	4628      	mov	r0, r5
 800612a:	6a21      	ldr	r1, [r4, #32]
 800612c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006130:	47e0      	blx	ip
 8006132:	2800      	cmp	r0, #0
 8006134:	dc06      	bgt.n	8006144 <__sflush_r+0xf8>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800613c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	e790      	b.n	8006066 <__sflush_r+0x1a>
 8006144:	4407      	add	r7, r0
 8006146:	1a36      	subs	r6, r6, r0
 8006148:	e7ea      	b.n	8006120 <__sflush_r+0xd4>
 800614a:	bf00      	nop
 800614c:	20400001 	.word	0x20400001

08006150 <_fflush_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	690b      	ldr	r3, [r1, #16]
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b913      	cbnz	r3, 8006160 <_fflush_r+0x10>
 800615a:	2500      	movs	r5, #0
 800615c:	4628      	mov	r0, r5
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	b118      	cbz	r0, 800616a <_fflush_r+0x1a>
 8006162:	6983      	ldr	r3, [r0, #24]
 8006164:	b90b      	cbnz	r3, 800616a <_fflush_r+0x1a>
 8006166:	f7ff fa19 	bl	800559c <__sinit>
 800616a:	4b14      	ldr	r3, [pc, #80]	; (80061bc <_fflush_r+0x6c>)
 800616c:	429c      	cmp	r4, r3
 800616e:	d11b      	bne.n	80061a8 <_fflush_r+0x58>
 8006170:	686c      	ldr	r4, [r5, #4]
 8006172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ef      	beq.n	800615a <_fflush_r+0xa>
 800617a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800617c:	07d0      	lsls	r0, r2, #31
 800617e:	d404      	bmi.n	800618a <_fflush_r+0x3a>
 8006180:	0599      	lsls	r1, r3, #22
 8006182:	d402      	bmi.n	800618a <_fflush_r+0x3a>
 8006184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006186:	f7ff faa7 	bl	80056d8 <__retarget_lock_acquire_recursive>
 800618a:	4628      	mov	r0, r5
 800618c:	4621      	mov	r1, r4
 800618e:	f7ff ff5d 	bl	800604c <__sflush_r>
 8006192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006194:	4605      	mov	r5, r0
 8006196:	07da      	lsls	r2, r3, #31
 8006198:	d4e0      	bmi.n	800615c <_fflush_r+0xc>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	059b      	lsls	r3, r3, #22
 800619e:	d4dd      	bmi.n	800615c <_fflush_r+0xc>
 80061a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a2:	f7ff fa9a 	bl	80056da <__retarget_lock_release_recursive>
 80061a6:	e7d9      	b.n	800615c <_fflush_r+0xc>
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <_fflush_r+0x70>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d101      	bne.n	80061b2 <_fflush_r+0x62>
 80061ae:	68ac      	ldr	r4, [r5, #8]
 80061b0:	e7df      	b.n	8006172 <_fflush_r+0x22>
 80061b2:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <_fflush_r+0x74>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	bf08      	it	eq
 80061b8:	68ec      	ldreq	r4, [r5, #12]
 80061ba:	e7da      	b.n	8006172 <_fflush_r+0x22>
 80061bc:	0800644c 	.word	0x0800644c
 80061c0:	0800646c 	.word	0x0800646c
 80061c4:	0800642c 	.word	0x0800642c

080061c8 <_lseek_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	2200      	movs	r2, #0
 80061d2:	4d05      	ldr	r5, [pc, #20]	; (80061e8 <_lseek_r+0x20>)
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fb fc7b 	bl	8001ad2 <_lseek>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_lseek_r+0x1e>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_lseek_r+0x1e>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000268 	.word	0x20000268

080061ec <__swhatbuf_r>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	460e      	mov	r6, r1
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	4614      	mov	r4, r2
 80061f6:	2900      	cmp	r1, #0
 80061f8:	461d      	mov	r5, r3
 80061fa:	b096      	sub	sp, #88	; 0x58
 80061fc:	da08      	bge.n	8006210 <__swhatbuf_r+0x24>
 80061fe:	2200      	movs	r2, #0
 8006200:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	061a      	lsls	r2, r3, #24
 8006208:	d410      	bmi.n	800622c <__swhatbuf_r+0x40>
 800620a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620e:	e00e      	b.n	800622e <__swhatbuf_r+0x42>
 8006210:	466a      	mov	r2, sp
 8006212:	f000 f8c5 	bl	80063a0 <_fstat_r>
 8006216:	2800      	cmp	r0, #0
 8006218:	dbf1      	blt.n	80061fe <__swhatbuf_r+0x12>
 800621a:	9a01      	ldr	r2, [sp, #4]
 800621c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006224:	425a      	negs	r2, r3
 8006226:	415a      	adcs	r2, r3
 8006228:	602a      	str	r2, [r5, #0]
 800622a:	e7ee      	b.n	800620a <__swhatbuf_r+0x1e>
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	2000      	movs	r0, #0
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	b016      	add	sp, #88	; 0x58
 8006234:	bd70      	pop	{r4, r5, r6, pc}
	...

08006238 <__smakebuf_r>:
 8006238:	898b      	ldrh	r3, [r1, #12]
 800623a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800623c:	079d      	lsls	r5, r3, #30
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d507      	bpl.n	8006254 <__smakebuf_r+0x1c>
 8006244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	2301      	movs	r3, #1
 800624e:	6163      	str	r3, [r4, #20]
 8006250:	b002      	add	sp, #8
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	466a      	mov	r2, sp
 8006256:	ab01      	add	r3, sp, #4
 8006258:	f7ff ffc8 	bl	80061ec <__swhatbuf_r>
 800625c:	9900      	ldr	r1, [sp, #0]
 800625e:	4605      	mov	r5, r0
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff fa5b 	bl	800571c <_malloc_r>
 8006266:	b948      	cbnz	r0, 800627c <__smakebuf_r+0x44>
 8006268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626c:	059a      	lsls	r2, r3, #22
 800626e:	d4ef      	bmi.n	8006250 <__smakebuf_r+0x18>
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	f043 0302 	orr.w	r3, r3, #2
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	e7e3      	b.n	8006244 <__smakebuf_r+0xc>
 800627c:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <__smakebuf_r+0x7c>)
 800627e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	6020      	str	r0, [r4, #0]
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	9b00      	ldr	r3, [sp, #0]
 800628c:	6120      	str	r0, [r4, #16]
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	b15b      	cbz	r3, 80062ac <__smakebuf_r+0x74>
 8006294:	4630      	mov	r0, r6
 8006296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629a:	f000 f893 	bl	80063c4 <_isatty_r>
 800629e:	b128      	cbz	r0, 80062ac <__smakebuf_r+0x74>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	89a0      	ldrh	r0, [r4, #12]
 80062ae:	4305      	orrs	r5, r0
 80062b0:	81a5      	strh	r5, [r4, #12]
 80062b2:	e7cd      	b.n	8006250 <__smakebuf_r+0x18>
 80062b4:	08005535 	.word	0x08005535

080062b8 <memchr>:
 80062b8:	4603      	mov	r3, r0
 80062ba:	b510      	push	{r4, lr}
 80062bc:	b2c9      	uxtb	r1, r1
 80062be:	4402      	add	r2, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	d101      	bne.n	80062ca <memchr+0x12>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e003      	b.n	80062d2 <memchr+0x1a>
 80062ca:	7804      	ldrb	r4, [r0, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	428c      	cmp	r4, r1
 80062d0:	d1f6      	bne.n	80062c0 <memchr+0x8>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <__malloc_lock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_lock+0x8>)
 80062d6:	f7ff b9ff 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	2000025c 	.word	0x2000025c

080062e0 <__malloc_unlock>:
 80062e0:	4801      	ldr	r0, [pc, #4]	; (80062e8 <__malloc_unlock+0x8>)
 80062e2:	f7ff b9fa 	b.w	80056da <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	2000025c 	.word	0x2000025c

080062ec <_free_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4605      	mov	r5, r0
 80062f0:	2900      	cmp	r1, #0
 80062f2:	d040      	beq.n	8006376 <_free_r+0x8a>
 80062f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f8:	1f0c      	subs	r4, r1, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfb8      	it	lt
 80062fe:	18e4      	addlt	r4, r4, r3
 8006300:	f7ff ffe8 	bl	80062d4 <__malloc_lock>
 8006304:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <_free_r+0x8c>)
 8006306:	6813      	ldr	r3, [r2, #0]
 8006308:	b933      	cbnz	r3, 8006318 <_free_r+0x2c>
 800630a:	6063      	str	r3, [r4, #4]
 800630c:	6014      	str	r4, [r2, #0]
 800630e:	4628      	mov	r0, r5
 8006310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006314:	f7ff bfe4 	b.w	80062e0 <__malloc_unlock>
 8006318:	42a3      	cmp	r3, r4
 800631a:	d908      	bls.n	800632e <_free_r+0x42>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	1821      	adds	r1, r4, r0
 8006320:	428b      	cmp	r3, r1
 8006322:	bf01      	itttt	eq
 8006324:	6819      	ldreq	r1, [r3, #0]
 8006326:	685b      	ldreq	r3, [r3, #4]
 8006328:	1809      	addeq	r1, r1, r0
 800632a:	6021      	streq	r1, [r4, #0]
 800632c:	e7ed      	b.n	800630a <_free_r+0x1e>
 800632e:	461a      	mov	r2, r3
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	b10b      	cbz	r3, 8006338 <_free_r+0x4c>
 8006334:	42a3      	cmp	r3, r4
 8006336:	d9fa      	bls.n	800632e <_free_r+0x42>
 8006338:	6811      	ldr	r1, [r2, #0]
 800633a:	1850      	adds	r0, r2, r1
 800633c:	42a0      	cmp	r0, r4
 800633e:	d10b      	bne.n	8006358 <_free_r+0x6c>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	4401      	add	r1, r0
 8006344:	1850      	adds	r0, r2, r1
 8006346:	4283      	cmp	r3, r0
 8006348:	6011      	str	r1, [r2, #0]
 800634a:	d1e0      	bne.n	800630e <_free_r+0x22>
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4401      	add	r1, r0
 8006352:	6011      	str	r1, [r2, #0]
 8006354:	6053      	str	r3, [r2, #4]
 8006356:	e7da      	b.n	800630e <_free_r+0x22>
 8006358:	d902      	bls.n	8006360 <_free_r+0x74>
 800635a:	230c      	movs	r3, #12
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	e7d6      	b.n	800630e <_free_r+0x22>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	1821      	adds	r1, r4, r0
 8006364:	428b      	cmp	r3, r1
 8006366:	bf01      	itttt	eq
 8006368:	6819      	ldreq	r1, [r3, #0]
 800636a:	685b      	ldreq	r3, [r3, #4]
 800636c:	1809      	addeq	r1, r1, r0
 800636e:	6021      	streq	r1, [r4, #0]
 8006370:	6063      	str	r3, [r4, #4]
 8006372:	6054      	str	r4, [r2, #4]
 8006374:	e7cb      	b.n	800630e <_free_r+0x22>
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000260 	.word	0x20000260

0800637c <_read_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	2200      	movs	r2, #0
 8006386:	4d05      	ldr	r5, [pc, #20]	; (800639c <_read_r+0x20>)
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f7fb fb44 	bl	8001a18 <_read>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_read_r+0x1e>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_read_r+0x1e>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000268 	.word	0x20000268

080063a0 <_fstat_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	2300      	movs	r3, #0
 80063a4:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_fstat_r+0x20>)
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	f7fb fb77 	bl	8001aa0 <_fstat>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d102      	bne.n	80063bc <_fstat_r+0x1c>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	b103      	cbz	r3, 80063bc <_fstat_r+0x1c>
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	bd38      	pop	{r3, r4, r5, pc}
 80063be:	bf00      	nop
 80063c0:	20000268 	.word	0x20000268

080063c4 <_isatty_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	2300      	movs	r3, #0
 80063c8:	4d05      	ldr	r5, [pc, #20]	; (80063e0 <_isatty_r+0x1c>)
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fb fb75 	bl	8001abe <_isatty>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_isatty_r+0x1a>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_isatty_r+0x1a>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000268 	.word	0x20000268

080063e4 <_init>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr

080063f0 <_fini>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr
